{{Header|Modding}}
{{Page version|42.7.0}}
{{About|modding structure of Project Zomboid|game files of Project Zomboid|Game files|explanations of file formats|File formats}}

Local mods are recognized in two different folders which each have their own rules and structure and are both in the [[#Cache folder]]:
*<code>Zomboid/mods/</code> - place to put mods to install manually without using the Steam Workshop. Not recommanded for mod development.
*<code>Zomboid/workshop/</code> - folder used for mod development and uploading to the Steam Workshop.

See this [https://github.com/Project-Zomboid-Community-Modding/pzmc-template example mod structure] to get started with your mod. Make sure to change the files as needed for your own case.

{{Note|It is highly suggested to use the <code>workshop/</code> folder for mod development as mods need to be uploaded from it and developing from the <code>mods/</code> folder will always require you to make a copy of it inside the <code>workshop/</code> folder if you want to upload it. There's also other advantages to using this folder.}}

==Workshop folder==
The Workshop folder will use the following structure:
{{CodeSnip
|code = 
Zomboid/
└── Workshop/
    └── MyExampleMod/
        ├── Contents/
        │   └── mods/
        │       ├── MyMod1/
        │       │   └── ...
        │       └── MyMod2/
        │           └── ...
        ├── workshop.txt
        └── preview.png
}}

*<code>Contents/</code>: The folder will only have the <code>mods/</code> folder.
*<code>Contents/mods/</code>: Your various mods which can be activated by the players will be put here, with each mod having their own [[mod.info]] file associated to be recognized (see [[#Mod folder]]). This is the folder uploaded to the Workshop.
*<code>workshop.txt</code>: Informations which are needed to upload your mod are put here (see [[workshop.txt]]).
*<code>preview.png</code>: The image used as your mod preview on the Steam Workshop. Game imposes a 256x256 resolution.

{{Note|Subfolders in <code>MyExampleMod/</code> which are not <code>Contents/</code> are not recognized by the game and can be used to store various files for your mod that shouldn't get uploaded. Thus you can store in it Python scripts, images, assets, etc.}}
{{Note|<code>MyExampleMod/</code> can be used as a Git repository (Git, Github, GitLab...).}}

==Mod folder==
The files of your mods are placed in the folder <code>Contents/mods/</code> alongside a [[mod.info]] file which is the core of your mod. The folder structure of your mod folder should be as follows:

====Build 41====
[[Build 41]] uses the following modding structure.
{{CodeSnip
| code =
Contents/
└── mods/
    ├── MyMod1/
    │   ├── media/
    │   │   └── ...
    │   ├── mod.info
    │   ├── poster.png
    │   └── ...
    └── MyMod2/             <--- for extra mods, simply add a new mod folder
        ├── media/
        │   └── ...
        ├── mod.info
        ├── poster.png
        └── ...
}}

{{Note|type=warn|The [[#Build 42|Build 42 modding structure]] is considered for the rest of the page. The main difference is the position of the [[#Media folder|media folder]] and the lack of versioning and common folders for Build 41.}}

===Build 42===
[[Build 42]] uses the following modding structure.
{{CodeSnip
| code =
Contents/
└── mods/
    ├── MyMod1/
    │   ├── common/         <--- common folder is mandatory, even if empty !
    │   │   └── media/
    │   │       └── ...
    │   ├── 42/
    │   │   ├── media/
    │   │   │   └── ...
    │   │   ├── mod.info
    │   │   └── poster.png
    │   ├── 42.1/           <--- for extra versions, simply add a new version folder
    │   │   ├── media/
    │   │   │   └── ...
    │   │   ├── mod.info
    │   │   └── poster.png
    │   ├── 42.1.5/         <--- same here, another different version
    │   │   ├── media/
    │   │   │   └── ...
    │   │   ├── mod.info
    │   │   └── poster.png
    │   └── ...
    └── MyMod2/            <--- for extra mods, simply add a new differently named mod folder
        └── ...
}}

{{Note|Multiple mods can be present in a single uploaded mod (inside <code>Contents/mods/</code>). This can be used for optional mods or different versions of the same mod.}}

==Common and versioning folders==
Common and versioning folders, introduced in [[Build 42]], help manage different mod versions per game version.  

*'''Versioning folders''' are useful when players stick to older game versions. You don't need one for every version. They should contain code files and [[mod.info]], as they often change with the game version.
*'''Common folder''' stores large files (models, textures, animations) to keep mod size down.  

These folders load with the following order:
#Common folder  
#Closest versioning folder to the game version (overwrites common files which are present in it)

The versioning folders can have the following possible naming:
{{CodeSnip
| code =
buildVersion.majorUpdate.minorUpdate
buildVersion.majorUpdate                ====> buildVersion.majorUpdate.0
buildVersion                            ====> buildVersion.0.0
}}

For example:
{{CodeSnip
| code =
42             ====> 42.0.0
43             ====> 43.0.0
42.12          ====> 42.12.0
42.1           ====> 42.1.0
42.0.5
43.5.1
}}

{{Note|type=warn|Common folder is not recognized by [[Build 41]] modding structure. However, the [[Build 41]] [[Lua (API)|Lua API]] can access some files in some cases.}}
{{Note|type=error|Common folder is mandatory, even if empty, for your mod to work !}}

==Media folder==
Mod assets are put inside this folder. Different subfolders need to be created based on the type of assets. These are usually the same as the [[Game files#Media folder|game media folder]] but below is a list of the commonly used subfolders:

{| class="wikitable theme-blue"
|+ style="white-space:nowrap" | List of commonly used subfolders
! Subfolder !! Description
|-
| style="min-width: 200px;text-align: center;"| <code>lua</code>
| style="min-width: 600px;"| To program with [[Lua (language)|Lua]] using the [[Lua (API)|API]].
|-
| style="min-width: 200px;text-align: center;"| <code>scripts</code>
| style="min-width: 600px;"| To create scripts for [[Item (scripts)|items]], [[Sound (scripts)|sounds]], [[Model (scripts)|models]], [[Vehicle (scripts)|vehicles]], [[CraftRecipe|crafts]], etc.
|-
| style="min-width: 200px;text-align: center;"| <code>AnimSets</code>
| style="min-width: 600px;"| [[File formats#XML|XML]] files which are used to define how animations are triggered.
|-
| style="min-width: 200px;text-align: center;"| <code>clothing</code>
| style="min-width: 600px;"| [[File formats#XML|XML]] files which are used to define clothing items and outfits.
|-
| style="min-width: 200px;text-align: center;"| <code>anims_X</code>
| style="min-width: 600px;"| For [[File formats#Modeling and animation formats|animation files]].
|-
| style="min-width: 200px;text-align: center;"| <code>models_X</code>
| style="min-width: 600px;"| For [[File formats#Modeling and animation formats|model files]].
|-
| style="min-width: 200px;text-align: center;"| <code>textures</code>
| style="min-width: 600px;"| For texture files used on models.
|-
| style="min-width: 200px;text-align: center;"| <code>ui</code>
| style="min-width: 600px;"| For images used in UI elements.
|-
| style="min-width: 200px;text-align: center;"| <code>sound</code>
| style="min-width: 600px;"| For sounds files.
|-
| style="min-width: 200px;text-align: center;"| <code>maps</code>
| style="min-width: 600px;"| For map files.
|}

{{Note|Technically, files which are in the parent folder of the media folder can be read from the [[Lua (API)|Lua API]] within the media folder.}}

==See also==
*[[File structure]]
*[[Workshop.txt]]
*[[mod.info]]

{{Navbox modding}}

{{ll|Category:Guides}}
