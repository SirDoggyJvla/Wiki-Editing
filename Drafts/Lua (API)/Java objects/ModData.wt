{{Header|Modding|Lua (API)}}
{{Page version|42.9.0}}
{{Move|Mod Data|This page is no longer just about the class ModData and as such should free the name space.}}
'''Mod data''' tables are used to persistently store Lua data. Mod data tables are regular Lua tables; they do not have any special semantics or functionality. Only plain old data (strings, booleans, numbers, and tables) can be stored persistently.

==Object Mod Data==
Any IsoObject has mod data, typically referred to as ''object mod data'' for disambiguation. Object mod data belongs to an instance of an object, such as a specific player or tile. Object mod data can be retrieved using {{Code|object:getModData()|lang=lua}}.
{{CodeSnip
| lang = lua
| code =
local player = getPlayer()
local modData = player:getModData()
modData.myString = "Hello World"
modData.myNumber = 42
modData.myTable = {1, 2, 3}
modData.myBoolean = true
}}

==Global Mod Data==
Global mod data is similar to object mod data, but does not belong to a specific object and relies on the class {{JavaObject|ModData|package=zombie/world/moddata}}. Instead, global mod data tables are accessed with a unique string key through the ModData class.
{{CodeSnip
| lang = lua
| code =
local modData = ModData.getOrCreate("MyModDataID")
modData.myString = "Hello World"
modData.myNumber = 42
modData.myTable = {1, 2, 3}
modData.myBoolean = true
}}

To improve [[Mod optimization|performances]], mod data can be cached, as the reference will not change throughout the course of a game:
{{CodeSnip
| lang = lua
| code =
local modData

Events.OnInitGlobalModData.Add(function()
    modData = ModData.getOrCreate("MyModDataID")
end)

-- example usage
Events.OnWeaponHitCharacter.Add(function(attacker, target, weapon, damage)
    modData.lastUsedWeapon = weapon:getFullType() -- persistently store the last used weapon
end)
}}

{{Navbox Java objects}}
