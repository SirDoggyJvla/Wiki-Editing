{
    "variables": {
        "character": {
            "type": "IsoPlayer",
            "description": "The character doing the action."
        },
        "action": {
            "type": "LuaTimedActionNew",
            "description": "The Java counterpart of the timed action."
        },
        "stopOnWalk": {
            "type": "Boolean",
            "default": true,
            "description": "If the action should stop when the character starts walking."
        },
        "stopOnRun": {
            "type": "Boolean",
            "default": true,
            "description": "If the action should stop when the character starts running."
        },
        "stopOnAim": {
            "type": "Boolean",
            "default": true,
            "description": "If the action should stop when the character starts aiming."
        },
        "caloriesModifier": {
            "type": "Number",
            "default": 1,
            "description": "The calories burning modifier for performing the action."
        },
        "maxTime": {
            "type": "Number",
            "default": -1,
            "description": "The maximum time the action can take."
        },
        "_isAddingActions": {
            "type": "Boolean",
            "description": "Indicates if actions are being added directly after this one. True when {{Code|beginAddingActions()|lang=lua}} is called, nil when {{Code|endAddingActions()|lang=lua}} is called."
        },
        "_numAddedActions": {
            "type": "Number",
            "description": "The number of actions added directly after this action for the time {{Code|_isAddingActions}} was true. Value is returned when <code>endAddingActions()</code> is triggered."
        }
    },
    "functions": {
        "new": {
            "parameters": [
                {
                    "name": "character",
                    "type": "IsoPlayer",
                    "description": "The character doing the action."
                }
            ],
            "returns": [
                {
                    "name": "instance",
                    "type": "ISBaseTimedAction",
                    "description": "The instance of the class."
                }
            ],
            "description": "Constructor of the class."
        },
        "isValidStart": {
            "parameters": [],
            "returns": [
                {
                    "name": "valid",
                    "type": "Boolean",
                    "description": "If the action is valid to start."
                }
            ],
            "description": "Checks if the action can start. Only triggers the check when starting the action after another one. If not valid, the queue is reset and the action is declared as a bugged action."
        },
        "isValid": {
            "parameters": [],
            "returns": [
                {
                    "name": "valid",
                    "type": "Boolean",
                    "description": "If the action is valid."
                }
            ],
            "description": "Checks if the action is valid before updating. Stops the action if false."
        },
        "stop": {
            "parameters": [],
            "description": "Stops the action. Only triggers when it is a forced stop. Cancels the entire queue of timed actions."
        },
        "forceComplete": {
            "parameters": [],
            "description": "Forces the action to complete."
        },
        "forceStop": {
            "parameters": [],
            "description": "Forces the action to stop. Cancels the rest of the queue and triggers {{Code|stop()|lang=lua}}."
        },
        "forceCancel": {
            "parameters": [],
            "description": "Cancels the action before it starts. Called whenever the action is removed from the queue without being started."
        },
        "waitToStart": {
            "parameters": [],
            "returns": [
                {
                    "name": "valid",
                    "type": "Boolean",
                    "description": "If the action can start."
                }
            ],
            "description": "Checks if the action can start until it can."
        },
        "start": {
            "parameters": [],
            "description": "Starts the action if it is valid and can start."
        },
        "isStarted": {
            "parameters": [],
            "returns": [
                {
                    "name": "started",
                    "type": "Boolean",
                    "description": "If the action has started."
                }
            ],
            "description": "Checks if the action has started."
        },
        "update": {
            "parameters": [],
            "description": "Updates the action every tick from the Java side."
        },
        "getJobDelta": {
            "parameters": [],
            "returns": [
                {
                    "name": "jobDelta",
                    "type": "Number",
                    "description": "The percentage of the action completed."
                }
            ],
            "description": "Returns the percentage of the action completed."
        },
        "resetJobDelta": {
            "parameters": [],
            "description": "Resets the job delta to the beginning."
        },
        "getDuration": {
            "parameters": [],
            "returns": [
                {
                    "name": "duration",
                    "type": "Number",
                    "description": "The {{Code|maxTime|lang=lua}} of the action."
                }
            ],
            "description": "Returns the duration of the action."
        },
        "perform": {
            "parameters": [],
            "description": "Performs the action at the end of the job delta."
        },
        "create": {
            "parameters": [],
            "description": "Creates the action, triggers during {{Code|begin()|lang=lua}}. Triggers {{Code|adjustMaxTime(maxTime)|lang=lua}} to update the <code>maxTime</code> value. Also creates a [[LuaTimedActionNew]] java object stored in {{Code|action}}."
        },
        "begin": {
            "parameters": [],
            "description": "Begins the action. Automatically triggered from [[ISTimedActionQueue]] when the action becomes the first in the queue and is valid to start."
        },
        "setCurrentTime": {
            "parameters": [
                {
                    "name": "currentTime",
                    "type": "Number",
                    "description": "The current time of the action."
                }
            ],
            "description": "Sets the current time of the action."
        },
        "setTime": {
            "parameters": [
                {
                    "name": "time",
                    "type": "Number",
                    "description": "The new {{Code|maxTime}} of the action."
                }
            ],
            "description": "Sets the {{Code|maxTime}} of the action."
        },
        "adjustMaxTime": {
            "parameters": [
                {
                    "name": "maxTime",
                    "type": "Number",
                    "description": "The {{Code|maxTime}} value to adjust."
                }
            ],
            "returns": [
                {
                    "name": "adjustedMaxTime",
                    "type": "Number",
                    "description": "The adjusted {{Code|maxTime}} value."
                }
            ],
            "description": "Adjusts the given {{Code|maxTime}} and returns an update value. This is called during {{Code|create()|lang=lua}}. Applies a debuff based on unhappiness, drunkness, pain levels and character timed action modifier."
        },
        "setActionAnim": {
            "parameters": [
                {
                    "name": "_action",
                    "type": "String|CharacterActionAnims",
                    "description": "The action animation to set."
                },
                {
                    "name": "_displayItemModels",
                    "type": "nil",
                    "description": "Deprecated. Should not be used.",
                    "error": "Deprecated. Should not be used."
                }
            ],
            "description": "Sets the action animation to {{Code|_action}}. See [[PerformingAction]] for the list of available actions."
        },
        "setOverrideHandModels": {
            "parameters": [
                {
                    "name": "_primaryHand",
                    "type": "InventoryItem",
                    "description": "The item to set in the primary hand."
                },
                {
                    "name": "_secondaryHand",
                    "type": "InventoryItem",
                    "description": "The item to set in the secondary hand."
                },
                {
                    "name": "_resetModel",
                    "type": "Boolean",
                    "description": "If true, it will reset the model."
                }
            ],
            "description": "Sets the item in hands to {{Code|_primaryHand}} and {{Code|_secondaryHand}}. If {{Code|_resetModel}} is true, it will reset the model to the default one."
        },
        "setOverrideHandModelsString": {
            "parameters": [
                {
                    "name": "_primaryHand",
                    "type": "String",
                    "description": "The item to set in the primary hand."
                },
                {
                    "name": "_secondaryHand",
                    "type": "String",
                    "description": "The item to set in the secondary hand."
                },
                {
                    "name": "_resetModel",
                    "type": "Boolean",
                    "description": "If true, it will reset the model."
                }
            ],
            "description": "Sets the item in hands to {{Code|_primaryHand}} and {{Code|_secondaryHand}}. If {{Code|_resetModel}} is true, it will reset the model to the default one."
        },
        "overrideWeaponType": {
            "parameters": [],
            "description": "Updates the [[Weapon (AnimNode)|character weapon type]] based on the override model."
        },
        "restoreWeaponType": {
            "parameters": [],
            "description": "Restores the [[Weapon (AnimNode)|character weapon type]] to the real weapon in hand."
        },
        "setAnimVariable": {
            "parameters": [
                {
                    "name": "_key",
                    "type": "string",
                    "description": "The animation variable to set."
                },
                {
                    "name": "_val",
                    "type": "string",
                    "description": "The value to set the animation variable to."
                }
            ],
            "description": "Sets the animation variable {{Code|_key}} to {{Code|_val}} of the timed action {{Code|character}}."
        },
        "addAfter": {
            "parameters": [
                {
                    "name": "action",
                    "type": "ISBaseTimedAction",
                    "description": "The action to add after this one."
                }
            ],
            "returns": [
                {
                    "name": "queue",
                    "type": "ISTimedActionQueue",
                    "description": "The queue to which the action is added."
                },
                {
                    "name": "action",
                    "type": "ISBaseTimedAction",
                    "description": "The action added to the queue."
                }
            ],
            "description": "Adds the given {{Code|action}} after this action instance ({{Code|self}}) to the [[ISTimedActionQueue|queue]] (see [[ISTimedActionQueue#Adding timed actions to the queue|<code>addAfter</code> in queue]])."
        },
        "beginAddingActions": {
            "parameters": [],
            "description": "When triggered, the next actions added to the queue are automatically added after this action. Sets {{Code|_isAddingActions}} to true and {{Code|_numAddedActions}} to 0."
        },
        "endAddingActions": {
            "parameters": [],
            "returns": [
                {
                    "name": "numAddedActions",
                    "type": "Number",
                    "description": "The number of actions added after this action."
                }
            ],
            "description": "Ends the automatic adding of actions after this action. Sets {{Code|_isAddingActions}} to nil and returns {{Code|_numAddedActions}} which is used to count the number of added actions after this action."
        },
        "getDeltaModifiers": {
            "parameters": [
                {
                    "name": "deltas",
                    "type": "MoveDeltaModifiers",
                    "description": "The delta modifiers object passed to the function by the java."
                }
            ],
            "description": "By default is unused, but can be used to modify the {{Code|character}} movement. Notably used in [[ISClimbOverFence]] to stop the character from turning during the action."
        }
    }
}
  