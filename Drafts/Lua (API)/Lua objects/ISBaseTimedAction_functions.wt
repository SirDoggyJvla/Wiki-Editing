{{Function|function=ISBaseTimedAction:new(character)|description=Constructor of the class.|
{{Function/param|name=character|type=IsoPlayer|description=The character doing the action.}}|
{{Function/param|name=instance|type=ISBaseTimedAction|description=The instance of the class.}}}}
{{Function|function=ISBaseTimedAction:isValidStart()|description=Checks if the action can start. Only triggers the check when starting the action after another one. If not valid, the queue is reset and the action is declared as a bugged action.||
{{Function/param|name=valid|type=Boolean|description=If the action is valid to start.}}}}
{{Function|function=ISBaseTimedAction:isValid()|description=Checks if the action is valid before updating. Stops the action if false.||
{{Function/param|name=valid|type=Boolean|description=If the action is valid.}}}}
{{Function|function=ISBaseTimedAction:stop()|description=Stops the action. Only triggers when it is a forced stop. Cancels the entire queue of timed actions.||}}
{{Function|function=ISBaseTimedAction:forceComplete()|description=Forces the action to complete.||}}
{{Function|function=ISBaseTimedAction:forceStop()|description=Forces the action to stop. Cancels the rest of the queue and triggers {{Code|stop()|lang=lua}}.||}}
{{Function|function=ISBaseTimedAction:forceCancel()|description=Cancels the action before it starts. Called whenever the action is removed from the queue without being started.||}}
{{Function|function=ISBaseTimedAction:waitToStart()|description=Checks if the action can start until it can.||
{{Function/param|name=valid|type=Boolean|description=If the action can start.}}}}
{{Function|function=ISBaseTimedAction:start()|description=Starts the action if it is valid and can start.||}}
{{Function|function=ISBaseTimedAction:isStarted()|description=Checks if the action has started.||
{{Function/param|name=started|type=Boolean|description=If the action has started.}}}}
{{Function|function=ISBaseTimedAction:update()|description=Updates the action every tick from the Java side.||}}
{{Function|function=ISBaseTimedAction:getJobDelta()|description=Returns the percentage of the action completed.||
{{Function/param|name=jobDelta|type=Number|description=The percentage of the action completed.}}}}
{{Function|function=ISBaseTimedAction:resetJobDelta()|description=Resets the job delta to the beginning.||}}
{{Function|function=ISBaseTimedAction:getDuration()|description=Returns the duration of the action.||
{{Function/param|name=duration|type=Number|description=The {{Code|maxTime|lang=lua}} of the action.}}}}
{{Function|function=ISBaseTimedAction:perform()|description=Performs the action at the end of the job delta.||}}
{{Function|function=ISBaseTimedAction:create()|description=Creates the action, triggers during {{Code|begin()|lang=lua}}. Triggers {{Code|adjustMaxTime(maxTime)|lang=lua}} to update the <code>maxTime</code> value. Also creates a [[LuaTimedActionNew]] java object stored in {{Code|action}}.||}}
{{Function|function=ISBaseTimedAction:begin()|description=Begins the action. Automatically triggered from [[ISTimedActionQueue]] when the action becomes the first in the queue and is valid to start.||}}
{{Function|function=ISBaseTimedAction:setCurrentTime(currentTime)|description=Sets the current time of the action.|
{{Function/param|name=currentTime|type=Number|description=The current time of the action.}}|}}
{{Function|function=ISBaseTimedAction:setTime(time)|description=Sets the {{Code|maxTime}} of the action.|
{{Function/param|name=time|type=Number|description=The new {{Code|maxTime}} of the action.}}|}}
{{Function|function=ISBaseTimedAction:adjustMaxTime(maxTime)|description=Adjusts the given {{Code|maxTime}} and returns an update value. This is called during {{Code|create()|lang=lua}}. Applies a debuff based on unhappiness, drunkness, pain levels and character timed action modifier.|
{{Function/param|name=maxTime|type=Number|description=The {{Code|maxTime}} value to adjust.}}|
{{Function/param|name=adjustedMaxTime|type=Number|description=The adjusted {{Code|maxTime}} value.}}}}
{{Function|function=ISBaseTimedAction:setActionAnim(_action,_displayItemModels)|description=Sets the action animation to {{Code|_action}}. See [[PerformingAction]] for the list of available actions.|
{{Function/param|name=_action|type=String|CharacterActionAnims|description=The action animation to set.}}
{{Function/param|name=_displayItemModels|type=nil|description=Deprecated. Should not be used.}}|}}
{{Function|function=ISBaseTimedAction:setOverrideHandModels(_primaryHand,_secondaryHand,_resetModel)|description=Sets the item in hands to {{Code|_primaryHand}} and {{Code|_secondaryHand}}. If {{Code|_resetModel}} is true, it will reset the model to the default one.|
{{Function/param|name=_primaryHand|type=InventoryItem|description=The item to set in the primary hand.}}
{{Function/param|name=_secondaryHand|type=InventoryItem|description=The item to set in the secondary hand.}}
{{Function/param|name=_resetModel|type=Boolean|description=If true, it will reset the model.}}|}}
{{Function|function=ISBaseTimedAction:setOverrideHandModelsString(_primaryHand,_secondaryHand,_resetModel)|description=Sets the item in hands to {{Code|_primaryHand}} and {{Code|_secondaryHand}}. If {{Code|_resetModel}} is true, it will reset the model to the default one.|
{{Function/param|name=_primaryHand|type=String|description=The item to set in the primary hand.}}
{{Function/param|name=_secondaryHand|type=String|description=The item to set in the secondary hand.}}
{{Function/param|name=_resetModel|type=Boolean|description=If true, it will reset the model.}}|}}
{{Function|function=ISBaseTimedAction:overrideWeaponType()|description=Updates the [[Weapon (AnimNode)|character weapon type]] based on the override model.||}}
{{Function|function=ISBaseTimedAction:restoreWeaponType()|description=Restores the [[Weapon (AnimNode)|character weapon type]] to the real weapon in hand.||}}
{{Function|function=ISBaseTimedAction:setAnimVariable(_key,_val)|description=Sets the animation variable {{Code|_key}} to {{Code|_val}} of the timed action {{Code|character}}.|
{{Function/param|name=_key|type=string|description=The animation variable to set.}}
{{Function/param|name=_val|type=string|description=The value to set the animation variable to.}}|}}
{{Function|function=ISBaseTimedAction:addAfter(action)|description=Adds the given {{Code|action}} after this action instance ({{Code|self}}) to the [[ISTimedActionQueue|queue]] (see [[ISTimedActionQueue#Adding timed actions to the queue|<code>addAfter</code> in queue]]).|
{{Function/param|name=action|type=ISBaseTimedAction|description=The action to add after this one.}}|
{{Function/param|name=queue|type=ISTimedActionQueue|description=The queue to which the action is added.}}
{{Function/param|name=action|type=ISBaseTimedAction|description=The action added to the queue.}}}}
{{Function|function=ISBaseTimedAction:beginAddingActions()|description=When triggered, the next actions added to the queue are automatically added after this action. Sets {{Code|_isAddingActions}} to true and {{Code|_numAddedActions}} to 0.||}}
{{Function|function=ISBaseTimedAction:endAddingActions()|description=Ends the automatic adding of actions after this action. Sets {{Code|_isAddingActions}} to nil and returns {{Code|_numAddedActions}} which is used to count the number of added actions after this action.||
{{Function/param|name=numAddedActions|type=Number|description=The number of actions added after this action.}}}}
{{Function|function=ISBaseTimedAction:getDeltaModifiers(deltas)|description=By default is unused, but can be used to modify the {{Code|character}} movement. Notably used in [[ISClimbOverFence]] to stop the character from turning during the action.|
{{Function/param|name=deltas|type=MoveDeltaModifiers|description=The delta modifiers object passed to the function by the java.}}|}}
