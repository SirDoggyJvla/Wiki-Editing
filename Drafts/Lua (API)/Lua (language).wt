{{Header|Modding|Modding guides}}
{{Page version|42.3.1}}
{{About|the Lua language|API to learn how to hook to Project Zomboid by using Lua|Lua (API)}}
'''Lua''' is a language heavily used in '''Project Zomboid'''. Its knowledge is handy if one plans to do any [[modding]] or just understand how the game works. It must be noted that Project Zomboid doesn't uses the last versions of Lua but instead a modified version of [https://www.lua.org/manual/5.1/ Lua 5.1]. The page explains the general knowledge needed of the Lua language to get started in programming in Lua but for specificities regarding the API, see the [[Lua (API)]] page.

==What is Lua?==
Lua is a powerful, fast, surprisingly lovely and simple scripting language. It is easily embedded into Java code (which Project Zomboid is written in) and thus was an ideal choice for the Indie Stone to introduce to the modding community. Lua appeared from the 0.2.0 test versions onwards, resulting in some fantastic mods. Some of the initial mods have gone on to be implemented as part of the vanilla game (Stormy's [https://web.archive.org/web/20130509044157/http:/www.theindiestone.com/community/viewtopic.php?f=33&t=6544 Reloading Mod], RobertJohnson's [https://web.archive.org/web/20121105020204/http:/theindiestone.com/community/viewtopic.php?f=31&t=8926 Farming Mod] and [https://web.archive.org/web/20120831072028/http:/theindiestone.com/community/viewtopic.php?f=31&t=8968 Camping Mod]).

==Getting started==
===Tools===
To starting writing in Lua, it is suggested to use a text editor that supports Lua syntax highlighting, and even better a proper [https://en.wikipedia.org/wiki/Integrated_development_environment IDE] to organize your projects and more easily manage files. The most popular and suggested IDE is [[Visual Studio Code]] due to existing tools that add Project Zomboid Lua support.

===Learning Lua===
Due to its simplicity, Lua is a language easily picked up by both programmers and non-programmers alike. You can find many resources online that can help you learn it a bit better.

Alternatively, you can test some Lua codes by utilizing a Lua interpreter such as [https://onecompiler.com/lua OneCompiler]. Of course, keep in mind that features beyond the standard Lua 5.1 may not work and some differences can exist with the original Lua 5.1, and of course no access to Project Zomboid's [[Lua (API)]] exists in this outside interpreter.

The following sections will explain in detail the various aspects of Lua that you will need to know to get started with modding Project Zomboid. [[Mod optimization]] might interest you if you're in need of various tips to make your mods run faster.

{{Note|It is recommanded to read the article [[Mod optimization]] to understand how to optimize your mods and make them run faster. Things that are available in Project Zomboid Lua can have important performance impact such as prints or even functions.}}

==Print==
The print function is used to output text to the console. This is useful for debugging purposes, as it allows you to see the values of variables and the flow of your code. The print function can take any number of arguments, which will be concatenated together and output to the console. For example:
{{CodeSnip
| lang = lua
| code = 
print("Hello World!") -- Output: Hello World!

-- alternatively
print("Hello", "World!") -- Output: Hello World!
}}

This code will output "Hello World!" in the console. In Project Zomboid, this will be displayed in the console window when the game is running in [[Debug mode]] as well as in the [[File structure#Console file|console file]].

{{Note|type=error|Printing too much text can slow down the game immensely, see [[Mod optimization#Prints are the devil|printing performance impact]]. After printing too much in the console, this can also lead to a major console file size which can be counted in gigabytes.}}

==Variables==
Variables are used to store data that can be accessed and modified throughout your code. Variables can store a variety of data types, such as numbers, strings, and tables. Variables in Lua are dynamically typed, meaning that you do not need to specify the type of a variable when you declare it. For example:
{{CodeSnip
| lang = lua
| code =
local x = 10 -- x is a number
local y = "Hello" -- y is a string
local z = {1, 2, 3} -- z is a table
}}

Variables can also reference other variables, including entries in tables. This allows you to create complex data structures and relationships between variables. For example:
{{CodeSnip
| lang = lua
| code =
local person = {name = "John", age = 30}
local name = person.name -- name now references the name entry in the person table
local age = person.age -- age now references the age entry in the person table
}}

In this example, the `person` table contains two entries: `name` and `age`. The variables `name` and `age` are then assigned the values of the corresponding entries in the `person` table. This allows you to easily access and manipulate the data stored in the table.

===Local and global===
Variables can be declared as local or global. Local variables are only accessible within the scope in which they are declared, while global variables are accessible throughout Project Zomboid. For example:
{{CodeSnip
| lang = lua
| code =
-- global variable
x = 10

-- local variable
local y = 20
}}

In this example, <code>x</code> is a global variable, while <code>y</code> is a local variable. Global variables can be accessed and modified from anywhere, while local variables are only accessible within the scope in which they are declared such as the core of your file or within [[#Functions]], [[#For loops]], [[#While loops]], [[#Repeat until]] and [[#Do end block]].

{{Note|type=warn|It is recommended to use local variables as much as possible to avoid polluting the global scope of your file. This will help you avoid conflicts with other mods and the game itself. If you need to access variables defined in a file from another file, use [[#Modules]].}}

===Data types===
Lua has several data types that can be stored in variables. The most common data types are numbers, strings, and tables. Numbers can be integers or floating-point numbers, strings are sequences of characters enclosed in quotes, and tables are collections of key-value pairs. For example:
{{CodeSnip
| lang = lua
| code =
local x = 10 -- number
local y = 3.14 -- number
local name = "John" -- string
local numbers = {1, 2, 3, 4, 5} -- table
}}

You can check the type of a variable using the `type` function. For example:
{{CodeSnip
| lang = lua
| code =
local x = 10
print(type(x)) -- Output: number

local name = "John"
print(type(name)) -- Output: string

local numbers = {1, 2, 3, 4, 5}
print(type(numbers)) -- Output: table
}}

===Arithmetic operators===
Lua supports several arithmetic operators that can be used to perform mathematical operations on numbers. The most common arithmetic operators are addition (+), subtraction (-), multiplication (*), division (/), and modulus (%). For example:
{{CodeSnip
| lang = lua
| code =
local x = 10
local y = 20
local sum = x + y -- sum is 30
local difference = x - y -- difference is -10
local product = x * y -- product is 200
local quotient = x / y -- quotient is 0.5
local remainder = x % y -- remainder is 10
}}

===Precedence and associativity===
Arithmetic operators in Lua follow the standard rules of precedence and associativity. Operators with higher precedence are evaluated before operators with lower precedence. Operators with the same precedence are evaluated from left to right. For example:
{{CodeSnip
| lang = lua
| code =
local result = 10 + 20 * 2 -- result is 50
}}

In this example, the multiplication operator (*) has higher precedence than the addition operator (+), so it is evaluated first. The result is then added to 10 to get the final result of 50.

===Boolean operators===
Lua also supports boolean operators that can be used to perform logical operations on boolean values. The most common boolean operators are `and`, `or`, and `not`. For example:
{{CodeSnip
| lang = lua
| code =
local x = true
local y = false
local result = x and y -- result is false
result = x or y -- result is true
result = not x -- result is false
}}

{{Note|<code>false</code> and <code>nil</code> are considered as false in Lua, while <code>true</code> and any other value are considered as true.}}

===Relational operators===
Lua supports several relational operators that can be used to compare values. The most common relational operators are `==` (equal), `~=` (not equal), `<` (less than), `>` (greater than), `<=` (less than or equal to), and `>=` (greater than or equal to). For example:
{{CodeSnip
| lang = lua
| code =
local x = 10
local y = 20
local result = x == y -- result is false
result = x ~= y -- result is true
result = x < y -- result is true
result = x <= y -- result is true
result = x > y -- result is false
result = x >= y -- result is false
}}

===Length operator===
The length operator <code>#</code> can be used to get the length of a string or the number of elements in a table. For example:
{{CodeSnip
| lang = lua
| code =
-- string
local name = "John"
print(#name) -- Output: 4

-- table
local numbers = {1, 2, 3, 4, 5}
print(#numbers) -- Output: 5
}}

This operator will not count keys-values in a table, but only the values in an array-like table.

==Tables==
Tables are a fundamental data structure in Lua that can be used to store and organize data. Tables can store a variety of data types, including numbers, strings, and other tables. Tables can be indexed by keys, which can be strings, numbers, or other data types, or act as pseudo arrays. For example:
{{CodeSnip
| lang = lua
| code =
-- key-value table
local person = {name = "John", age = 30}
print(person.name) -- Output: John
print(person.age) -- Output: 30

-- array like table
local numbers = {1, 2, 3, 4, 5}
print(numbers[1]) -- Output: 1
print(numbers[2]) -- Output: 2

-- nested tables
local person = {name = "John", address = {city = "New York", country = "USA"},}
print(person.address.city) -- Output: New York
print(person.address.country) -- Output: USA
}}

Tables can be used to store and organize data in a structured way, making it easier to access and manipulate the data. Tables can also be used to represent complex data structures and relationships between data.

{{Note|type=warn|All tables are technically key-tables which is why "arrays" (<code>{5,6,"hello"}</code>) are pseudo-arrays. This makes them more costly than actual arrays but it is possible to create true arrays by using the <code>table.newarray()</code> function (see [[Mod optimization#Array tables|proper array tables]]).}}

===Table Iteration===
Tables can be iterated over using the <code>pairs</code> and <code>ipairs</code> functions. The <code>pairs</code> function iterates over the key-value pairs in a table, while the <code>ipairs</code> function iterates over the values in a table with integer keys. For example:
{{CodeSnip
| lang = lua
| code =
-- pairs
local person = {name = "John", age = 30}
for key, value in pairs(person) do
    print(key, value)
end

-- ipairs
local numbers = {1, 2, 3, 4, 5}
for index, value in ipairs(numbers) do
    print(index, value)
end
}}

{{Note|<code>pairs</code> can also be used to iterate over arrays but it will also iterate over the keys which are not integers if you mixed both.}}

'''However''', for arrays, it is recommended to not use any of these functions and instead use a simple for loop. This is because the <code>ipairs</code> and <code>pairs</code> function are very costly in terms of performance (see [[Mod optimization#pairs and ipairs|pairs and ipairs optimization]]).
{{CodeSnip
| lang = lua
| code =
local numbers = {1, 2, 3, 4, 5}
for i = 1, #numbers do
    print(i, numbers[i])
end
}}

===Lookup tables===
Lookup tables are tables that are used to map keys to values. They can be used to store data that can be accessed quickly and efficiently. They can notably be extremely efficient when needing to check for specific values or associations, providing a fast way to retrieve corresponding values on conditions. Lookup tables can also be used to emulate basic support for enums in Lua. For example:
{{CodeSnip
| lang = lua
| code =
-- Access a color based on its name, like an enum!
local colors = {
    RED = "FF0000",
    GREEN = "00FF00",
    BLUE = "0000FF"
}

print(colors.RED) -- Output: FF0000
-- or
print(colors["RED"]) -- Output: FF0000

-- alternatively, you can access the color using a variable
local color = "GREEN"
print(colors[color]) -- Output: 00FF00

-- checking an entry not in the table
local invalidColor = "YELLOW"
print(colors[invalidColor]) -- Output: nil
}}
{{CodeSnip
| lang = lua
| code =
-- supposing zombie is an IsoZombie instance
local health = math.floor(zombie:getHealth())

-- BAD
local status
if health == 0 then
    status = "Dead"
elseif health == 1 then
    status = "Dying"
elseif health == 2 then
    status = "Injured"
elseif health == 3 then
    status = "Healthy"
end

-- BETTER
local healthStatus = {
    [0] = "Dead",
    [1] = "Dying",
    [2] = "Injured",
    [3] = "Healthy"
}
local status = healthStatus[health]

print("Health status:", status or "Unknown") -- Output the health status
}}

==Functions==
Functions are blocks of code that can be called and executed at any point in your program. Functions can take arguments, perform operations, and return values. Functions in Lua are first-class citizens, meaning that they can be assigned to variables, passed as arguments to other functions, and returned from other functions. For example:
{{CodeSnip
| lang = lua
| code =
-- function definition
local function add(a, b)
    return a + b
end

-- function call
local result = add(10, 20)
print(result) -- Output: 30

-- alternative syntax, write in a variable the function
local multiply = function(a, b)
    return a * b
end
}}

Functions can be defined using the <code>function</code> keyword, followed by the function name, a list of arguments in parentheses, and the function body. Functions can return values using the <code>return</code> keyword, followed by the value to be returned. Functions can be called by using the function name followed by a list of arguments in parentheses.

Functions can also be assigned to variables, passed as arguments to other functions, and returned from other functions. This allows you to create higher-order functions that can manipulate and compose other functions.

{{Note|type=warn|Functions overhead can be performance heavy, see [[Mod optimization#The less function calls, the better|functions optimization tips]].}}

===Decoration===
Decorating a function is a way to add additional functionality to a function without modifying its original code. This can be done by wrapping the function in another function that adds the desired functionality. For example:
{{CodeSnip
| lang = lua
| code =
-- original function
local function add(a, b)
    return a + b
end

-- decorate the function
local original_add = add

-- decorate to run code before the original function
local function add(a, b)
    print("Adding", a, "and", b) -- extra action, will run before the original function
    return original_add(a, b)
end

-- decorate to run code after the original function
local function add(a, b)
    local result = original_add(a, b)
    print("Result is", result) -- extra action, will run after the original function
    return result
end

-- decorate function to run different behavior based on input
local function add(a, b)
    -- don't run the addition if one of the arguments is 0
    if a == 0 then
        return b
    elseif b == 0 then
        return a
    end

    return original_add(a, b)
end
}}

This can be applied to any functions defined by the game or by other mods to add additional functionality without modifying the original code. It is '''HIGHLY''' recommended to use this method to avoid conflicts with other mods if you don't purely need to overwrite base functionalities.

==Nil==
The <code>nil</code> value is used to represent the absence of a value. Variables that have not been assigned a value are automatically set to <code>nil</code>. For example:
{{CodeSnip
| lang = lua
| code =
local x
print(x) -- Output: nil
}}

<code>nil</code> can also be used to remove a value from a variable. For example:
{{CodeSnip
| lang = lua
| code =
local x = 10
print(x) -- Output: 10

x = nil
print(x) -- Output: nil
}}

<code>nil</code> is counted as falsy in Lua, meaning that it is considered as false in boolean expressions.
{{CodeSnip
| lang = lua
| code =
local x = nil
if x then
    print("x is true")
else
    print("x is false") -- Output: x is false
end

-- alternatively
if not x then
    print("x is false") -- Output: x is false
end
}}

However, it is important to note that <code>nil</code> is not the same as <code>false</code> (<code>nil ~= false</code>). <code>nil</code> is used to represent the absence of a value, while <code>false</code> is a boolean value that represents false.

===Nil and tables===
You can remove a value in a key-table by setting it to <code>nil</code>. This will remove the key-value pair from the table. For example:
{{CodeSnip
| lang = lua
| code =
local person = {name = "John", age = 30}
print(person.name) -- Output: John

person.name = nil
print(person.name) -- Output: nil
}}

However doing that to an array-like table will break <code>ipairs</code>. It will also break <code>#</code>.
{{CodeSnip
| lang = lua
| code =
tbl = {
  "Hello",
  "World",
  "!",
}

print(#tbl) -- Output: 3
for i,v in ipairs(tbl) do
    print(i,v) -- Output: 1, Hello, 2, World, 3, !
end

tbl[2] = nil -- remove the second value

-- ipairs and # iterate over the table until it finds a nil value, so it will stop at the first value and not print the second and third one
print(#tbl) -- Output: 1
for i,v in ipairs(tbl) do
    print(i,v) -- Output: 1, Hello
end

-- however the values after 2 are still there, like demonstrated by this example here
tbl[2] = "modders"

print(#tbl) -- Output: 3
for i,v in ipairs(tbl) do
    print(i,v) -- Output: 1, Hello, 2, modders, 3, !
end
}}

<code>pairs</code> on the other hand will not break and will iterate over all the values in the table. To remove values from an array-like table, it is recommended to use <code>table.remove</code> instead as this will move every subsequent element down in the array, maintaining the integrity of the indices and allowing <code>ipairs</code> and <code>#</code> to work as intended.

==For loops==
For loops are used to iterate over a sequence of values and perform operations on each value. For loops in Lua can be used to iterate over arrays, tables, and other sequences of values. For example:
{{CodeSnip
| lang = lua
| code =
-- repeat a number
for i = 1, 5 do
    print(i) -- Output: 1, 2, 3, 4, 5
end

-- repeat a number with a step
for i = 1, 10, 2 do
    print(i) -- Output: 1, 3, 5, 7, 9
end

-- repeat a number in reverse
for i = 5, 1, -1 do
    print(i) -- Output: 5, 4, 3, 2, 1
end
}}

For loops in Lua can be used to iterate over a range of values, with an optional step value. For loops can also be used to iterate over arrays, tables, and other sequences of values as seen in [[#Tables]]. For loops can be used to perform operations on each value in the sequence.

<code>break</code> can be used to exit a loop early, while <code>continue</code> can be emulated by using [[#Repeat until]] blocks.
{{CodeSnip
| lang = lua
| code =
for i = 1, 5 do 
    repeat
        if i == 3 then
            break
        end
        print(i) -- Output: 1, 2
    until true 
end
}}

===Custom iterators===
You can create [https://www.lua.org/pil/7.1.html custom iterators] in Lua by defining a custom iterator function. {{Code|ipairs}} is a built-in iterator function with the following shape:
{{CodeSnip
| lang = lua
| code =
local function ipairs_iterator(t, index)
    local nextIndex = index + 1
    local nextValue = t[nextIndex]
    if nextValue ~= nil then
        return nextIndex, nextValue
    end
end

function ipairs(t)
    return ipairs_iterator, t, 0
end
}}

In the same way, you can make a custom iterator function:
{{CodeSnip
| lang = lua
| code =
function my_iterator(t, index)
    local nextIndex = index + 1
    local nextValue = t[nextIndex]
    if nextValue ~= nil then
        -- make sure that every numbers are doubled
        if type(nextValue) == "number" then 
            nextValue = nextValue * 2
        end
        return nextIndex, nextValue
    end
end
}}

When the iterator function returns {{Code|nil}}, the iteration stops.

==While loops==
While loops are used to repeat a block of code while a condition is true. While loops in Lua can be used to repeat a block of code until a condition is false. For example:
{{CodeSnip
| lang = lua
| code =
local i = 1
while i <= 5 do
    print(i) -- Output: 1, 2, 3, 4, 5
    i = i + 1
end
}}

While loops in Lua can be used to repeat a block of code until a condition is false. It is however '''not recommended''' to use while loops without properly knowing what you are doing as they can easily lead to infinite loops which will make the game stuck and crash.

<code>break</code> can be used here too, as well as the continue trick used in [[#For loops]].
{{CodeSnip
| lang = lua
| code =
local i = 1
while i <= 5 do
    repeat
        if i == 3 then
            break
        end
        print(i) -- Output: 1, 2, 4, 5
    until true 
    i = i + 1
end
}}

==Repeat until==
Repeat until loops are used to repeat a block of code until a condition is true. Repeat until loops in Lua can be used to repeat a block of code until a condition is true. For example:
{{CodeSnip
| lang = lua
| code =
local i = 1
repeat
    print(i) -- Output: 1, 2, 3, 4, 5
    i = i + 1
until i > 5
}}

Repeat until loops in Lua can be used to repeat a block of code until a condition is true. It is recommended to use repeat until loops instead of while loops when you want to ensure that the block of code is executed at least once.

<code>break</code> can be used to stop the loop early.

Repeat until can be used to create a continue-like behavior in other types of loop like [[#For loops]] and [[#While loops]].
{{CodeSnip
| lang = lua
| code =
for i = 1, 5 do
    repeat
        if i == 3 then
            break
        end
        print(i) -- Output: 1, 2, 4, 5
    until true
end
}}

==Conditional statements (if)==
Conditional statements are used to execute different blocks of code based on the value of a condition. Conditional statements in Lua can be used to execute different blocks of code based on the value of a condition. For example:
{{CodeSnip
| lang = lua
| code =
local x = 10
if x > 5 then
    print("x is greater than 5") -- Output: x is greater than 5
elseif x < 5 then
    print("x is less than 5") -- Not reached
else
    print("x is equal to 5") -- Not reached
end
}}

Conditional statements in Lua can be used to execute different blocks of code based on the value of a condition. Conditional statements can be used to create branching logic in your code, allowing you to handle different cases and scenarios. But for this last case, you can utilize key-value tables to create a switch-case like structure.

==Switch-case using tables==
Lua does not have a built-in switch-case statement like some other languages, but you can achieve similar functionality using key-value tables. For example:
{{CodeSnip
| lang = lua
| code =
local actions = {
    greet = function()
        print("Hello!")
    end,
    farewell = function()
        print("Goodbye!")
    end,
    default = function()
        print("Unknown action")
    end
}

-- greet case
local action = "greet"
local func = actions[action] or actions.default
func() -- Output: Hello!

-- farewell case
action = "farewell"
func = actions[action] or actions.default
func() -- Output: Goodbye!

-- default use example
action = "unknown"
func = actions[action] or actions.default
func() -- Output: Unknown action
}}

In this example, the `actions` table contains functions for different actions. The `action` variable is used to look up the corresponding function in the `actions` table. If the action is not found, the `default` function is used. This allows you to create a switch-case like structure using tables.

==Do end blocks==
Do end blocks are used to create a block of code that can be executed as a single unit. For example:
{{CodeSnip
| lang = lua
| code =
do
    local x = 10
    local y = 20
    local sum = x + y
    print(sum) -- Output: 30
end
}}

However this block is mostly used to limit the scope of variables and functions. This is useful to avoid polluting the global scope of your file with variables that are only used in a specific block of code.

==Modules==
Modules are used to organize and encapsulate code into reusable units. Modules in Lua can be used to organize and encapsulate code into reusable units. Modules can contain functions, variables, and other data that can be accessed and used by other parts of your code. For example:
{{CodeSnip
| lang = lua
| code =
--- mymodule.lua

-- module definition
local M = {}

-- module function
function M.add(a, b)
    return a + b
end

-- module variable
M.PI = 3.14159

return M
}}

Modules can be used to access code which was defined locally in another file. This is useful to separate your code into different files and keep your code organized and [[Mod optimization#Local, not global|eliminate the use of globals]]. Modules can be loaded using the <code>require</code> function, which will load and execute the module code. For example:
{{CodeSnip
| lang = lua
| code =
--- main.lua

-- load module
local mymodule = require("mymodule")

-- use module function
local result = mymodule.add(10, 20)
print(result) -- Output: 30

-- use module variable
print(mymodule.PI) -- Output: 3.14159
}}

==String manipulation==
Strings are used to store and manipulate text data. Strings in Lua can be used to store and manipulate text data. Strings can be concatenated using the <code>..</code> operator. For example:
{{CodeSnip
| lang = lua
| code =
local name = "John"
local age = 30
local message = "Hello, " .. name .. "! You are " .. age .. " years old."
print(message) -- Output: Hello, John! You are 30 years old.
}}

<code>tostring(variable)</code> can be used to transform a variable into a string. This works for all types of variables such as [[Java object|Java objects]].
{{CodeSnip
| lang = lua
| code =
local number = 10
local string = tostring(number)
print(string) -- Output: 10
}}

The [https://www.lua.org/pil/20.html string library of Lua] is very powerful and can be used to manipulate strings in many ways. For example, you can use the <code>string.upper</code> function to convert a string to uppercase, the <code>string.lower</code> function to convert a string to lowercase, and the <code>string.sub</code> function to extract a substring from a string.

You can also format strings using the <code>string.format</code> function, which allows you to create formatted strings with placeholders for variables. For example:
{{CodeSnip
| lang = lua
| code =
local name = "John"
local age = 30
local message = string.format("Hello, %s! You are %d years old.", name, age)
print(message) -- Output: Hello, John! You are 30 years old.
}}

This can even be used alongside [[Translations]] files to have dynamic text translated in different language.

==Tips and tricks==
*Check [[Mod optimization]] to learn how to optimize your mods and make them run faster.

===Readability===
*Ask yourself if you read your code in a year, would you understand it? If not, you should improve it's readability.
*Use proper indentation to make your code more readable.
*Use descriptive variable and function names to make your code easier to understand.
*Use comments to explain your code and document your functions.
*Limiting making nested indentation is suggested. You can use guard clauses to avoid them:
{{CodeSnip
| lang = lua
| code =
if condition then
    -- do stuff         <--- this adds an indentation level
end

-- instead do this
if not condition then return end

-- do stuff             <--- one less indentation level
}}


==Navigation==
{{Navbox modding}}
