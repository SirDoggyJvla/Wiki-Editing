{{Header|Modding}}
{{Page version|42.0.2}}
{{About|the Lua language|API to learn how to hook to Project Zomboid by using Lua|Lua (API)}}
'''Lua''' is a language heavily used in '''Project Zomboid'''. Its knowledge is handy if one plans to do any [[modding]] or just understand how the game works. It must be noted that Project Zomboid doesn't uses the last versions of Lua but instead a modified version of Lua 5.1. The page explains the general knowledge needed of the Lua language to get started in programming in Lua but for specificities regarding the API, see the [[Lua (API)]] page.

==What is Lua?==
Lua is a powerful, fast, surprisingly lovely and simple scripting language. It is easily embedded into Java code (which Project Zomboid is written in) and thus was an ideal choice for the Indie Stone to introduce to the modding community. Lua appeared from the 0.2.0 test versions onwards, resulting in some fantastic mods. Some of the initial mods have gone on to be implemented as part of the vanilla game (Stormy's [http://theindiestone.com/community/viewtopic.php?f=33&t=6544 Reloading Mod], RobertJohnson's [http://theindiestone.com/community/viewtopic.php?f=31&t=8926 Farming Mod] and [http://theindiestone.com/community/viewtopic.php?f=31&t=8968 Camping Mod]).

It is important to note that Project Zomboid's API uses a modification of [https://www.lua.org/manual/5.1/ Lua 5.1] and as such features from the classic Lua you might find will not be usable.

==How do I write and edit Lua code?==
In order to create code, you will first need a program to write in. You could do this in Notepad, but this would make it significantly more difficult than it needs to be. We recommend you choose one of the programs listed below. There is a variety of programs, all of which have advantages:
*[https://notepad-plus-plus.org Notepad++] - this is popular amongst many coders. You can download a Lua language file which highlights Lua keywords and helps make code more readable.
*[https://www.scintilla.org/SciTE.html SciTE] - this program highlights Lua keywords and datatypes for easy reading. Most importantly, it also contacts a Lua [[Wikipedia:Integrated development environment|IDE]], meaning that you can run Lua code inside the program. For this reason, this is the best tool for when you are learning Lua.
*[https://www.jetbrains.com/idea/ IntelliJ IDEA] (with a [https://plugins.jetbrains.com/plugin/5055-lua Lua plugin]) - this is an excellent tool that highlights syntax errors and suspicious globals. It was [http://theindiestone.com/community/viewtopic.php?f=27&t=10814 recommended by lemmy101] and makes a great tool for making actual mods.
*'''UTF-8 encoding settings''': please note that whichever program you use, make sure it is using standard UTF-8 encoding. As of [[Build 41#Build 41.78.16|build 41.78.16]], .lua files are assumed to use UTF-8 encoding. IDEs such as Jetbrains Rider may use UTF-8-BOM as their default settings, which will cause any scripts saved with such encoding to not load properly.

In the case of [[Lua (API)|Project Zomboid's API]], it is highly suggested to use [https://code.visualstudio.com/ Visual Studio Code] as a community plugin called [https://github.com/asledgehammer/Umbrella Umbrella] was developed to allow easy completion and code verification.

==Learning Lua==
Due to its simplicity, Lua is a language easily picked up by both programmers and non-programmers alike. These early tutorials are written with the assumption the reader has no previous knowledge of programming, i.e., the absolute beginner. For those with experience who might get impatient with the pace of these tutorials, it is recommendeded reading ''Programming in Lua'', with the [https://www.lua.org/pil/ first edition available for free].

The tutorials here are intended to be done in order, so that the techniques and complexity of examples increase as you become for comfortable with the language. They first introduce you to the Lua language (with PZ in mind), before moving on to specifically using Lua for Project Zomboid. Like any skill, it will take time and practice to learn, so don't be put off if you don't master something immediately.

===Variables assignments datatypes===
For SciTE users: To run code, choose 'save as' from the file menu and save a file with the extension '.lua'. The play 'Run Program' button should then become available to use. Any output from your code will be displayed in the box at the bottom (if this is missing, press F8 to bring it up).

====Hello World====
In Lua this is easily done:

<syntaxhighlight lang="lua">print("Hello World!")</syntaxhighlight>

''print'' is a built-in Lua function. Functions can be identified by the parentheses, these things: (). Anything between the parentheses are called ''arguments''. In this case, we passed it the string 'Hello World!' which it took and printed in the console. Note that Lua is case-sensitive, so ''print()'' is not same as ''Print()''<br/>
Also note, that unlike many other languages, we do not need a semicolon at the end of each line (although you can still use semicolons with no ill effect!).

====Variables and assignment====
Variables are basically named storage containers. You can put any value inside a variable, then refer to it easily by using the variable's name. Let's take a look at the Hello World example to illustrate this:

<syntaxhighlight lang="lua">a = "Hello World!"
print(a)</syntaxhighlight>

Here, we placed the string 'Hello World' inside the variable <code>a</code>, then printed <code>a</code>. This should have produced the same results as before. Before we put the string into the variable <code>a</code>, it was empty (contained ''nil''). By ''assigning'' it a value, we ''initialized'' it. Note we used the single equals sign, =, to assign the string to the variable. This is basically a command to make the item on the left to be equal to that on the right. We can place practically anything inside a variable:

<syntaxhighlight lang="lua">a = print
a("Hello World!")

b = "This works too."
a(b)</syntaxhighlight>

We can also assign multiple variables at once:

<syntaxhighlight lang="lua">a, b, c = "This is called", "multiple", "assignment!"
print(a, b, c)</syntaxhighlight>

Note if we have more values than variables, the extra variables are discarded. Likewise, any extra variables remain unchanged (i.e., containing ''nil'' in the example below).

<syntaxhighlight lang="lua">a, b, c = "Data ", "missing"
print(a, b, c)</syntaxhighlight>

Multiple assignment is particular useful for swapping variables around with having to use a third variable to hold data on the transition:

<syntaxhighlight lang="lua">a, b = 1, 2
print(a, b)
a, b = b, a
print(a, b)</syntaxhighlight>

Note there are some rules on what variable names can be. It cannot contain anything other than letters, underscores, or digits, and it must start with an underscore or letter (i.e., not a digit). It also cannot be any of Lua's keywords (such as ''and'', ''or'', ''function'', ''local'' etc.), but we will go into these more later.

====Datatypes====
So far 'strings' and 'functions' were mentioned, these are both examples of different ''datatypes'' found in Lua. ''Datatypes'' are the classifications of a value. A useful function to discover the datatype of a value is ''type()''. In order to see the result of this, we also need to use ''print()''. Try some of these examples:

<syntaxhighlight lang="lua">print(type(a))
print(type("Hello!"))
print(type(345))
print(type(print))
print(type(true))
print(type(0))
print(type(false))</syntaxhighlight>

You probably guessed it, the main ones are:

*''numbers'' - any digit, including zero
*''nil'' - the absense of value
*''function'' - a function, like print() or type()
*''string'' - a sequence of characters
*''boolean'' - true or false
*''table'' - a list of values (covered in a later tutorial)

Other types include ''userdata'' and ''thread'', but these won't be needed at this stage.

To determine a string, we use quotes, either "double" or 'single'. As a special case, we can also use double square brackets: [[ ]]

Characters inside square brackets are treated literally, so backslash escaping (more on this in another tutorial!) doesn't work, and a new line is determined by simply using an actual new line. See below for more clarification:

<syntaxhighlight lang="lua">print("A string")
print("A 'string'")
print([["Square brackets" have
unique properties, that can
very useful later. You also cannot
use 'escaping': \n, \a \\]])</syntaxhighlight>

Using quotes will suffice for now when using strings, but it is worth remembering square brackets if you want to write a long string with separate lines, or your strings contain backslashes you just want to print.

====Summary====
*Lua is case-sensitive
*''print()'' can be used to print values to the console
*''type()'' can be used to discover the datatype of a value
*Variables are containers which can be assigned pretty much any value
*You can do multiple assignments on one line
*Variables without assigned values are not initialized and contain ''nil''
*There are eight datatypes: ''nil'', ''number'', ''string'', ''function'', ''table'', ''boolean'', ''userdata'' and ''thread''

====Test yourself====
1) Swap the following variables around '''without''' using multiple assignment:

<syntaxhighlight lang="lua">a = "A"
b = "B"</syntaxhighlight>

<div class="mw-collapsible mw-collapsed" width="100%" data-expandtext="Show solution" data-collapsetext="Hide solution">
<syntaxhighlight lang="lua">a = "A"
b = "B"
temp = a
a = b
b = temp
print(a, b)</syntaxhighlight>
This requires you to use a third variable to hold the contents of one of the original variables. This is avoided when using multiple assignment.
</div>

2) This code contains errors, identify and fix them:

<syntaxhighlight lang="lua">Hello = a
b = Print
c = type
b(c(a))</syntaxhighlight>

<div class="mw-collapsible mw-collapsed" width="100%" data-expandtext="Show solution" data-collapsetext="Hide solution">
<syntaxhighlight lang="lua">a = "Hello"
b = print
c = type
b(c(a))</syntaxhighlight>
When assigning a variable, the contents need to appear on the right of the equal sign, and the variable name to the left. Strings also require quotation marks " " or ' '. Remember that Lua is case-sensitive, meaning Print is not a real function, unlike ''print''. While variables that contain just a function is ugly (and fairly pointless), it does highlight that any piece of code can be held in a variable.
</div>

3) Without running it, what would the outcome of this code?

<syntaxhighlight lang="lua">a = type(type(1))
print(a)</syntaxhighlight>

<div class="mw-collapsible mw-collapsed" width="100%" data-expandtext="Show solution" data-collapsetext="Hide solution">
The ''type'' function always returns a string as its result, regardless of the argument's datatype. Therefore, ''type'' of ''type'' is a string.
</div>

===Arithmetic operators===
This short tutorial will cover the basic arithmetic operators used within Lua.

So in a nutshell, the math operators include:
*+  Addition
*-  Subtraction
* *  Multiplication
*/  Division
*^  Power of / Exponentiation

We can see these in action:

<syntaxhighlight lang="lua">print(2 + 3)
print(2 - 3)
print(2 * 3)
print(2 ^ 3)
print(2 - 3 + 4 * 5 ^ 6)</syntaxhighlight>

====Precedence====
With the last example we should also mention precedence. Precedence refers to the order in which operations are performed in. This is standardised for consistency:

:^ (Exponentiation, right associative)
:: * (Multiplication), / (division)
:::+ (Addition), - (Subtraction)

Everything except exponentiation is ''left associative'', meaning that any operations with the same precendence are done from left to right, while exponentiation is done from right to left. Of course you can override precedence simply by placing anything you want done first within parentheses. Like this:

<syntaxhighlight lang="lua">print(4 + 5 * 10)
print((4 + 5) * 10) --This will have a different result</syntaxhighlight>

In the last example I placed a comment by using two dashed lines (--). This signifies something you want the Lua interpreter to ignore, and is often used to mark code so yourself and others can understand it more easily. It is considered good programming etiquette to comment your  code, and is invaluable when trying to learn.

Here are some more examples using variables from the first tutorial:

<syntaxhighlight lang="lua">b = 5
a = b + 2*3
b = a / b
print(b, a)</syntaxhighlight>

Note that you cannot use arithmetic operators on anything other than the numbers datatype. However, if a string consists entirely of numbers, then Lua is smart enough to convert the datatype to avoid errors:

<syntaxhighlight lang="lua">print("200" + 25)

a = "Even if it contained a non-number once"
a = 25
print("200" + a)

a = "25"
print(type(a))
a = a + a
print(a)
print(type(a))</syntaxhighlight>

You might have noticed that it was still considered a string before being used by the arithmetic operator. As a general rule, you should avoid storing numbers as strings.

====Summary====
*There are five arithmetic operators: Addition (+), Subtraction (-), Multiplication (*), Division (/), Exponentiation (^)
*These are performed in order of precedence
*Precedence can be overriden with parentheses
*Math operators can only be used on the number datatype, but Lua converts number only strings to the number datatype when used
*Comments can be placed in code using two dashes: --

===Relational and boolean operators===
====Relational operators====
Relational operators are used to compare two values and return a boolean (true or false) as a result. They consist of:
:* >   More than
:* <   Less than
:* ==  Equal to
:* >=  More than or equal to
:* <=  Less than or equal to
:* ~=  Not equal to

Notice that when comparing values we use two equal signs ==, rather than when we are assigning a variable, when we use just one.

They are fairly self-explanatory when comparing numbers:

<syntaxhighlight lang="lua">print(1 > 2)
print(1 < 2)
print(1 >= 1)
print(5 <= 10)
print(1 == 2)
print(1 ~= 1)</syntaxhighlight>

We can also use the to compare strings, although this is slightly more complicated. For single character strings, it compares the collation (the order it appears in that ''locale''):

<syntaxhighlight lang="lua">print("a" < "b")
print("a" == "a")
print("c" >= "d")
print("A" < "a")
print("A" < "B")
print("Z" > "a")</syntaxhighlight>

For multiple line strings, it compares the first character that is different:

<syntaxhighlight lang="lua">print("abcd" < "abce")
print("abc" < "abcd")
print("ab" > "Abcdefghijk")</syntaxhighlight>

Note that == and ~= can be used to compare values of any datatype:

<syntaxhighlight lang="lua">print(false == nil)
print(false ~= 0)
print(1 == "1")</syntaxhighlight>

Notice that two different datatypes will never be considered equal. The rest of the relational operators can only be used when comparing two strings or two numbers, otherwise Lua will throw up an error.

====Boolean operators====
This consists of three operators: ''and'', ''or'' and ''not''.

=====and=====
The ''and'' operator returns true if both it's operands (the values used by an operator) are true, otherwise it returns false. Have a look at these examples to get a better understanding:

<syntaxhighlight lang="lua">print(true and true)
print(true and false)
print(1 < 2 and "a" > "A")
print(false and nil)
print(nil and false)
print(true and 10)
print(10 and true)</syntaxhighlight>

Notice that if the first operand is ''false'' or ''nil'', then the first operand is returned, otherwise the second operand is returned.

=====or=====
The ''or'' operand returns true if one of it's operands is true, otherwise it returns false:

<syntaxhighlight lang="lua">print(1 > 1 or 1 == 1)
print(1 ~= 1 or nil)
print(nil or false)
print(true or false)
print(1 < 2 or 1 ~= 2)</syntaxhighlight>

In contrast to ''and'', ''or'' returns it's first operand if it is something other than false or ''nil'', otherwise it returns the second operand. This can be useful when writing a function that uses variables that may be uninitialized, for example:

<syntaxhighlight lang="lua">print(FavouriteFilm or "Die Hard")
 FavouriteFilm = "Pan's Labyrinth"
 print(FavouriteFilm or "Die Hard")</syntaxhighlight>

As FavouriteFilm == nil, the ''or'' operator returned the string instead. When we assigned it a value, being the first operand it was returned first.

=====not=====
''not'' is the only ''unary'' operator on our list, as it only takes one operand. The rest are considered ''binary'', as they take two operands. When using ''not'', the operand goes to the right. If the operand is false or nil, the result is true, otherwise it returns false:

<syntaxhighlight lang="lua">print(not false)
print(not nil)
print(not 0)
print(not "Noooo")
print(not (1 < 2))</syntaxhighlight>

Notice that I used brackets around the relational operator in the last example. This is because ''not'' has high precedence than <, resulting in 'false < 2', which throws up an error.

====Updated precedence====
This means the precedence list from the last tutorial needs to be updated:

:^ (Eponentiation, right associative)
::''not'', # (length operator, explained next tutorial)
::: * (Multiplication), / (Division)
::::+ (Addition), - (Subtract)
:::::.. (String concatenation, explained next tutorial)
::::::<, >, ~=, ==, >=, <= (Relational operators)
:::::::''and''
::::::::''or''
Don't worry about memorising this list, it is just a useful way to introduce the different operators you will most commonly use.

====Summary====
*The relational operators are: <, >, ~=, ==, >=, <=
*These can be used to compare two values
*''and'' operator returns true if both its operands are true
*''or'' operator returns true if one of its operands are true
*''not'' returns true if its operand is ''false'' or ''nil''

===Concatenation and length operators===
This short tutorial will cover two useful operators that haven't been mentioned so far.

====Concatenation operator====
Concatenation is the process of splicing together two values (strings or numbers) into a string, and is represented by two dots: ..<br/>
For example:

<syntaxhighlight lang="lua">a = "Very " .. "handy"
print(a)</syntaxhighlight>

You can concatenate variables too, if they contain strings or numbers:

<syntaxhighlight lang="lua">a = "This also "
b = "works"
c = a .. b
print(c)

d = 25 .. 25
print(d)
print(type(d))</syntaxhighlight>

Note that the output is always a string. Although remember Lua can convert strings containing only numbers into a number if is attempted to be used as a number:

<syntaxhighlight lang="lua">d = "25" .. 25
print(d, type(d))
d = d * d
print(d, type(d))</syntaxhighlight>

Within PZ, this is useful for menus or any seen text that uses a value that may vary by player. For example:

<syntaxhighlight lang="lua">playerName = "Baldspot"
daysSurvived = 7
zedsKilled = 15

print(playerName .. " survived for " .. daysSurvived .. " days. He killed " .. zedsKilled .. " zombies.")</syntaxhighlight>

====Length operator====
The length operator is self-explanatory; it returns the length of its operand. It is unuary and represented with: #

<syntaxhighlight lang="lua">a = "Baldspot was here"
print("The sentence is " .. #a .. " characters long")</syntaxhighlight>

It can only be used for strings and tables.

====Summary====
*Concatenation operator splices together two numbers or strings into a string
*Length operator returns the length of either a string or table

===If statements and functions===
====If statements====
If statements allow the user to control the conditions for when code is run. It tests its conditions and then completes ''then'' or ''else'' statements accordingly, with ''else'' being optional. In full, the format is as follows:

<syntaxhighlight lang="lua">a = 1
if a > 5 then
  print("More than 5!")
  elseif a < 5 then
  print("Less than 5!")
  else
  print("Number is 5!")
end</syntaxhighlight>

As the value of a changes, potentially so will the output. Both ''else'' and ''elseif'' are optional:

<syntaxhighlight lang="lua">a = 1
 if a > 5 then
   print("More than 5!")
 end</syntaxhighlight>

''elseif'' is a useful alternative to putting separate if statements under ''else'' - meaning only one ''end'' is needed for the whole if statement.<br/>
Like most things in Lua, if statements can be nested:

<syntaxhighlight lang="lua">a = 3
 if a > 5 then
    if a/2 == math.floor(a/2) then
      print("a is more than 5 and is even")
      else
      print("a is more than 5 and is odd")
    end
   elseif a < 5 then
    if a/2 == math.floor(a/2) then
      print("a is less than 5 and is even")
      else
      print("a is less than 5 and is odd")
    end
   else
   print("a is 5!")
 end</syntaxhighlight>

math.floor returns the nearest lower integer (whole number). The math library will be explored  in later tutorials.
Although, it should be mentioned this can be written using one if statement:

<syntaxhighlight lang="lua">a = 9
 if a > 5 and a/2 == math.floor(a/2) then
  print("a is more than 5 and is even")
  elseif a > 5 and a/2 ~= math.floor(a/2) then
  print("a is more than 5 and is odd")
  elseif a < 5 and a/2 == math.floor(a/2) then
  print("a is less than 5 and is even")
  elseif a < 5 and a/2 ~= math.floor(a/2) then
  print("a is less than 5 and is odd")
  else
  print("a is 5!")
 end</syntaxhighlight>

====Functions====
Functions, like print, allow the same piece of code to be used repeatdedly without having to re-write it every time. They can be creating using this format:

<syntaxhighlight lang="lua">function increment(a)
--statements go here
end</syntaxhighlight>

''a'' here represents any arguments that could be used by the function - like strings entered into ''print''.<br/>
Here is an example of a function:

<syntaxhighlight lang="lua">function incrementPrint(a)
print(a)
a = a+1
print(a)
end

incrementPrint(5)</syntaxhighlight>

Note that while ''a'' has been used to indicate where an argument goes, a variable by the same name won't be used unless entered as an argument. For example:

<syntaxhighlight lang="lua">function increment(a)
print(a)
a = a+1
print(a)
end

a = 5
increment(a)
print(a)</syntaxhighlight>

The ''a'' referred to inside the function is different to the variable ''a'' - this is the difference between local and global variables and will be explained in a later tutorial. What this does mean is that you don't have to worry about arguments conflicting with variable names - although equally variables of the same name can't be accessed outside the function.<br/>
If you try the following code, you may notice that there is no output:

<syntaxhighlight lang="lua">function increment(a)
a = a+1
end

print(increment(1))</syntaxhighlight>

This is because no value is returned from the function. This can be rectified using ''return'' - however, ''return'' is the last statement to be read in the function:

<syntaxhighlight lang="lua">function increment(a)
a = a+1
return a
end

print(increment(1))</syntaxhighlight>

When calling a function with a single argument which is either a literal string or table constructor, then you do not need the parenthesis:

<syntaxhighlight lang="lua">print"Hello World!"</syntaxhighlight>

====Summary====
*If statements check their condition to see if it is true and runs the appropriate statement
*They can include ''elseif'' and or ''else''
*You only need one ''end'' per if statement
*Functions allow the same piece of code to be run again
*Arguments are local variables inside a variable
*''return'' can be used to return anything inside the function
*Functions with a single argument that is a string or table constructor do not need parentheses

===Loops===
Loops allow the user to control how many times a piece of code is run. There are three main types of loops used in Lua: ''for'', ''while'' and ''repeat''. ''while'' loops are not supported in PZ, so will only be mentioned very briefly.

====For loops====
For loops have the following format:

<syntaxhighlight lang="lua">for local_variable = start_number, end_number, step do
--statements go here
end</syntaxhighlight>

For example:

<syntaxhighlight lang="lua">for i = 1, 10 do
print(i)
end</syntaxhighlight>

In the above example 'step' is not specified, so Lua assumes it is +1. However, we can specifiy step to anything numerical, including decimals and negative numbers:

<syntaxhighlight lang="lua">for i = 10, 1, -0.5 do
print(i)
end</syntaxhighlight>

If Lua detects that the loop will never reach the end number, it simply won't run. Note that i used in the example is a local variable, so any changes made to it are only done inside the chunk:

<syntaxhighlight lang="lua">s = 10
e = 15

for i = s, e do
print("Start i: ".. i, "Start s: " .. s)
i = i+i
s = s+s
print("End i: " .. i, "End s: " .. s)
end

print("Final: " .. tostring(i), s)</syntaxhighlight>

====While loops====
''while'' loops are not supported by PZ (although this [http://theindiestone.com/community/viewtopic.php?f=27&t=7525 isn't strictly true]), however it is worth knowing if you want to use Lua outside PZ. A ''while'' loop tests a condition to see whether it is true, and repeats its statements until it is. They have the following format:

<syntaxhighlight lang="lua">while condition_is_true do
--statements
end</syntaxhighlight>

For example:
<syntaxhighlight lang="lua">i = 1

while i < 5 do
print(i)
i = i+1
end</syntaxhighlight>

====Repeat loops====
Repeat loops are similar to ''while'' loops, except the condition is tested at the end of the loop, meaning it always runs at least once.
They have this format:

<syntaxhighlight lang="lua">repeat
--statements
until condition_is_true</syntaxhighlight>

Note that unlike ''for'' and ''while'' loops it does not need an ''end'' or ''do''. Using the same example as the ''while'' loop:

<syntaxhighlight lang="lua">i = 1

repeat
print(i)
i = i+1
until i > 5</syntaxhighlight>

As already stated, ''repeat'' loops always run at least once regardless:

<syntaxhighlight lang="lua">i = 6

repeat
print(i)
i = i+1
until i > 5

print(i)</syntaxhighlight>

====Summary====
*''for'' loops can numerically dictate how many times code is run
*The step of a ''for'' loop is assumed to be +1 if not specified
*''while'' loops repeat while its condition is not true
*''while'' are not properly supported in PZ
*''repeat'' loops are similar to ''while'' loops, but always run at least once

===Local and global variables===
There are two types of variables in Lua: local and global. So far, these tutorials have used only global variables (unless otherwise specified). Global variables are available to the whole program. Local variables are available inside the chunk they were created. See this example for further clarification:

<syntaxhighlight lang="lua">for i  = 1, 3 do
local l = i*i
g = i*i
print(l, g)
end

print(l, g)</syntaxhighlight>

The global variable 'g' continues to exist outside the loop, while local 'l' is discarded. As can be seen, local variables can be specified using ''local''. Local varibales only exist inside their 'chunk' or lower chunks, such as nested if statements. Chunks refer to a sequence of statements, such as inside an if statement, loop or function. See this example:

<syntaxhighlight lang="lua">i = 4

if i > 3 then
 local v = "V"
 print(v .. " is available")
       if i/2 == math.floor(i/2) then
       local v2 = "v2"
       print(v  .. " is available in lower chunks too")
       print(v2 .. " is available as it was created in this lower chunk")
       end
 print(tostring(v2) .. " but is not available in a higher chunk")
end</syntaxhighlight>

It is considered [https://wiki.c2.com/?GlobalVariablesAreBad good practice to avoid using global variables] where possible. It makes code is easier to read (as you can see the scope of each variable used, i.e. the chunks it is used in), it clutters namespace and makes it easier to confuse common ones (such as 'player', 'x' or y') and could create problems where different parts of the program try to access a global simultaneously. Local variables allow you to bypass this problem.

One useful thing you can do with local variables is to make a copy of a global variable inside a chunk where it is needed. This preserves the global variable from any changes.

<syntaxhighlight lang="lua">playerHealth = 100

function damageRecieved(damage)
local playerHealth = playerHealth
playerHealth = playerHealth - damage
print(playerHealth)
end

damageRecieved(25)
print(playerHealth))</syntaxhighlight>

The 'local v = v' can be a useful snippet to have.

====Summary====
*Global variables scope is the whole program
*Local varaible scope is only inside the chunk it was created (and any lower chunks)
*Where possible, local variables should always be used
*local v = v is a useful way to use the value of global variables while preserving them

===Tables===
Tables are the last datatype to be introduced in these tutorials. In Lua they are very flexible and extremely useful. They are basically lists of values held in one place.
To create one, we use a table constructor, represented by curly brackets, like so:

<syntaxhighlight lang="lua">week = {}
print(type(week))</syntaxhighlight>

This creates a table called 'week'. We can now start adding values into the table. There are multiple ways of doing this. Tables that are '''arrays''', i.e. tables with the indexes being numbers, we can simply write as so:

<syntaxhighlight lang="lua">week = {"Monday", "Tuesday", "Wednesday"}
print(week[2])</syntaxhighlight>

Table fields can be understood is terms of ''table[key] = value'' <br/>
The above is the equivalent of writing:

<syntaxhighlight lang="lua">week = {[1] = "Monday", [2] = "Tuesday", [3] = "Wednesday"}</syntaxhighlight>

We can also specify individual positions:

<syntaxhighlight lang="lua">week[4] = "Thursday"
week[5] = "Friday"</syntaxhighlight>

The other type of table is called an '''associative table''' (also known as an associative array) - this is one where we use other datatypes for indexes instead of numbers, or the array has obvious gaps. With these types of tables you can add new fields using only a dot:

<syntaxhighlight lang="lua">week = {}
week.LastDay = "Sunday"
print(week.LastDay)</syntaxhighlight>

Note that tables are always anonymous - there is no fixed relationship between the variable pointing to the table and the table itself:

<syntaxhighlight lang="lua">week = {}
week.LastDay = "Sunday"

days = week
print(days.LastDay)</syntaxhighlight>

Also note that that week.x is not the same as week[x]. week.x is a field indexed by "x", while week[x] is a field indexed by the variable x.
Tables can contain any datatype, including tables:

<syntaxhighlight lang="lua">characters = {Baldspot  = {}, Kate = {} }
bald = characters.Baldspot
kate = characters.Kate

bald.health = 100
kate.health = 25

print(characters.Baldspot.health, characters.Kate.health)

bald.weapons = {"Knife", "Frying Pan", "Baseball Bat"}

print(characters.Baldspot.weapons[2])</syntaxhighlight>

Tables can also include functions. These functions can actually affect the table contents itself, but this will be covered in a later OOP tutorial.

====Summary====
*Tables are created using the table constructor, {}
*Arrays are tables with logical numerical indexes
*Associative tables are tables with indexes that are not numbers
*Tables can contain any datatype

===Looping through tables===
As covered in the last tutorial, you can access individual fields easily. However, there may be times when you want to use all the key-value pairs stored in table. For this, we use loops.

Firstly, let's create a table:

<syntaxhighlight lang="lua">week  = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"}</syntaxhighlight>

If you try ''print(week)'' you'll notice all you get is Lua's reference for that table. To view all the values in arrays, we can use a special for loop called ''ipairs'':

<syntaxhighlight lang="lua">for i,v in ipairs(week) do
print(i, v)
end</syntaxhighlight>

As you can see, i is assigned all the keys, and v all the values. Like mentioned in the loops tutorial, these are local variables discarded each cycle.<br/>
''ipairs'' only works for arrays without any gaps. It works by iterating over the key-value pairs until key=nil and key+1=nil.
Note that you can also use a regular loop to go through an array:

<syntaxhighlight lang="lua">for i = 1, #week do
print(i, week[i])
end</syntaxhighlight>

For associative tables we can use a slight variation, ''in pairs'':

<syntaxhighlight lang="lua">Bob = {}
Bob.health = 50
Bob.weapon = "Axe"
Bob.hunger = 100

for i,v in pairs(Bob) do
print(i, v)
end</syntaxhighlight>

This returns all key-value pairs, but in an unpredictable order.

====Summary====
*You can use an ipairs to loop through arrays
*Or use a regular for loop and the length operator
*You can use pairs loop for associative tables, but the order of returned values is unpredictable

==See also==
*{{ll|Lua event}}
*{{ll|Lua object}}

==External links==
*[https://www.youtube.com/user/DevHQLessons Video tutorials]
*[http://lua-users.org/wiki/LuaTutorial Additional tutorials]

{{Navbox modding}}
