{{Header|Modding}}
{{Page version|42.0.2}}
{{About|the Lua language|API to learn how to hook to Project Zomboid by using Lua|Lua (API)}}
'''Lua''' is a language heavily used in '''Project Zomboid'''. Its knowledge is handy if one plans to do any [[modding]] or just understand how the game works. It must be noted that Project Zomboid doesn't uses the last versions of Lua but instead a modified version of [https://www.lua.org/manual/5.1/ Lua 5.1]. The page explains the general knowledge needed of the Lua language to get started in programming in Lua but for specificities regarding the API, see the [[Lua (API)]] page.

==What is Lua?==
Lua is a powerful, fast, surprisingly lovely and simple scripting language. It is easily embedded into Java code (which Project Zomboid is written in) and thus was an ideal choice for the Indie Stone to introduce to the modding community. Lua appeared from the 0.2.0 test versions onwards, resulting in some fantastic mods. Some of the initial mods have gone on to be implemented as part of the vanilla game (Stormy's [https://web.archive.org/web/20130509044157/http:/www.theindiestone.com/community/viewtopic.php?f=33&t=6544 Reloading Mod], RobertJohnson's [https://web.archive.org/web/20121105020204/http:/theindiestone.com/community/viewtopic.php?f=31&t=8926 Farming Mod] and [https://web.archive.org/web/20120831072028/http:/theindiestone.com/community/viewtopic.php?f=31&t=8968 Camping Mod]).

==Getting started==
===Tools===
To starting writing in Lua, it is suggested to use a text editor that supports Lua syntax highlighting, and even better a proper [https://en.wikipedia.org/wiki/Integrated_development_environment IDE] to organize your projects and more easily manage files. The most popular and suggested IDE is [[Visual Studio Code]] due to existing tools that add Project Zomboid Lua support.

===Learning Lua===
Due to its simplicity, Lua is a language easily picked up by both programmers and non-programmers alike. You can find many resources online that can help you learn it a bit better.

Alternatively, you can test some Lua codes by utilizing a Lua interpreter such as [https://onecompiler.com/lua OneCompiler]. Of course, keep in mind that features beyond the standard Lua 5.1 may not work and some differences can exist with the original Lua 5.1, and of course no access to Project Zomboid's [[Lua (API)]] exists in this outside interpreter.

The following sections will explain in detail the various aspects of Lua that you will need to know to get started with modding Project Zomboid. [[Mod optimization]] might interest you if you're in need of various tips to make your mods run faster.

<span style="font-size: 120%; font-weight: bold; color: green;">Note: </span> It is recommanded to read the article [[Mod optization]] to understand how to optimize your mods and make them run faster. Things that are available in Project Zomboid Lua can have important performance impact such as prints or even functions.

==Print==
The print function is used to output text to the console. This is useful for debugging purposes, as it allows you to see the values of variables and the flow of your code. The print function can take any number of arguments, which will be concatenated together and output to the console. For example:
{{CodeSnip
| lang = lua
| code = 
print("Hello World!") -- Output: Hello World!

-- alternatively
print("Hello", "World!") -- Output: Hello World!
}}

This code will output "Hello World!" in the console. In Project Zomboid, this will be displayed in the console window when the game is running in [[Debug mode]] as well as in the [[File structure#Console file|console file]].

<span style="font-size: 120%; font-weight: bold; color: red;">Important ! </span> Printing too much text can slow down the game immensly, see [[Mod optimization#Prints are the devil|printing optimization]].

==Variables==
Variables are used to store data that can be accessed and modified throughout your code. Variables can store a variety of data types, such as numbers, strings, and tables. Variables in Lua are dynamically typed, meaning that you do not need to specify the type of a variable when you declare it. For example:
{{CodeSnip
| lang = lua
| code =
local x = 10 -- x is a number
local y = "Hello" -- y is a string
local z = {1, 2, 3} -- z is a table
}}

Variables can also reference other variables, including entries in tables. This allows you to create complex data structures and relationships between variables. For example:
{{CodeSnip
| lang = lua
| code =
local person = {name = "John", age = 30}
local name = person.name -- name now references the name entry in the person table
local age = person.age -- age now references the age entry in the person table
}}

In this example, the `person` table contains two entries: `name` and `age`. The variables `name` and `age` are then assigned the values of the corresponding entries in the `person` table. This allows you to easily access and manipulate the data stored in the table.

===Data types===
Lua has several data types that can be stored in variables. The most common data types are numbers, strings, and tables. Numbers can be integers or floating-point numbers, strings are sequences of characters enclosed in quotes, and tables are collections of key-value pairs. For example:
{{CodeSnip
| lang = lua
| code =
local x = 10 -- number
local y = 3.14 -- number
local name = "John" -- string
local numbers = {1, 2, 3, 4, 5} -- table
}}

You can check the type of a variable using the `type` function. For example:
{{CodeSnip
| lang = lua
| code =
local x = 10
print(type(x)) -- Output: number

local name = "John"
print(type(name)) -- Output: string

local numbers = {1, 2, 3, 4, 5}
print(type(numbers)) -- Output: table
}}

===Arithmetic operators===
Lua supports several arithmetic operators that can be used to perform mathematical operations on numbers. The most common arithmetic operators are addition (+), subtraction (-), multiplication (*), division (/), and modulus (%). For example:
{{CodeSnip
| lang = lua
| code =
local x = 10
local y = 20
local sum = x + y -- sum is 30
local difference = x - y -- difference is -10
local product = x * y -- product is 200
local quotient = x / y -- quotient is 0.5
local remainder = x % y -- remainder is 10
}}

===Precedence and associativity===
Arithmetic operators in Lua follow the standard rules of precedence and associativity. Operators with higher precedence are evaluated before operators with lower precedence. Operators with the same precedence are evaluated from left to right. For example:
{{CodeSnip
| lang = lua
| code =
local result = 10 + 20 * 2 -- result is 50
}}

In this example, the multiplication operator (*) has higher precedence than the addition operator (+), so it is evaluated first. The result is then added to 10 to get the final result of 50.

===Boolean operators===
Lua also supports boolean operators that can be used to perform logical operations on boolean values. The most common boolean operators are `and`, `or`, and `not`. For example:
{{CodeSnip
| lang = lua
| code =
local x = true
local y = false
local result = x and y -- result is false
result = x or y -- result is true
result = not x -- result is false
}}

===Relational operators===
Lua supports several relational operators that can be used to compare values. The most common relational operators are `==` (equal), `~=` (not equal), `<` (less than), `>` (greater than), `<=` (less than or equal to), and `>=` (greater than or equal to). For example:
{{CodeSnip
| lang = lua
| code =
local x = 10
local y = 20
local result = x == y -- result is false
result = x ~= y -- result is true
result = x < y -- result is true
result = x <= y -- result is true
result = x > y -- result is false
result = x >= y -- result is false
}}

==Tables==
Tables are a fundamental data structure in Lua that can be used to store and organize data. Tables can store a variety of data types, including numbers, strings, and other tables. Tables can be indexed by keys, which can be strings, numbers, or other data types, or act as pseudo arrays. For example:
{{CodeSnip
| lang = lua
| code =
-- key-value table
local person = {name = "John", age = 30}
print(person.name) -- Output: John
print(person.age) -- Output: 30

-- array like table
local numbers = {1, 2, 3, 4, 5}
print(numbers[1]) -- Output: 1
print(numbers[2]) -- Output: 2

-- nested tables
local person = {name = "John", address = {city = "New York", country = "USA"}}
print(person.address.city) -- Output: New York
print(person.address.country) -- Output: USA
}}

Tables can be used to store and organize data in a structured way, making it easier to access and manipulate the data. Tables can also be used to represent complex data structures and relationships between data.

===Table Iteration===
Tables can be iterated over using the <code>pairs</code> and <code>ipairs</code> functions. The <code>pairs</code> function iterates over the key-value pairs in a table, while the <code>ipairs</code> function iterates over the values in a table with integer keys. For example:
{{CodeSnip
| lang = lua
| code =
-- pairs
local person = {name = "John", age = 30}
for key, value in pairs(person) do
    print(key, value)
end

-- ipairs
local numbers = {1, 2, 3, 4, 5}
for index, value in ipairs(numbers) do
    print(index, value)
end
}}

<span style="font-size: 120%; font-weight: bold; color: green;">Note: </span> <code>pairs</code> can also be used to iterate over arrays but it will also iterate over the keys which are not integers if you mixed both.

'''However''', for arrays, it is recommended to not use any of these functions and instead use a simple for loop. This is because the <code>ipairs</code> and <code>pairs</code> function are very costly in terms of performance (see [[Mod optimization#pairs and ipairs|pairs and ipairs optimization]]).
{{CodeSnip
| lang = lua
| code =
local numbers = {1, 2, 3, 4, 5}
for i = 1, #numbers do
    print(i, numbers[i])
end
}}

==Functions==
Functions are blocks of code that can be called and executed at any point in your program. Functions can take arguments, perform operations, and return values. Functions in Lua are first-class citizens, meaning that they can be assigned to variables, passed as arguments to other functions, and returned from other functions. For example:
{{CodeSnip
| lang = lua
| code =
-- function definition
local function add(a, b)
    return a + b
end

-- function call
local result = add(10, 20)
print(result) -- Output: 30
}}

Functions can be defined using the <code>function</code> keyword, followed by the function name, a list of arguments in parentheses, and the function body. Functions can return values using the <code>return</code> keyword, followed by the value to be returned. Functions can be called by using the function name followed by a list of arguments in parentheses.

Functions can also be assigned to variables, passed as arguments to other functions, and returned from other functions. This allows you to create higher-order functions that can manipulate and compose other functions.

<span style="font-size: 120%; font-weight: bold; color: red;">Important ! </span> Functions overhead can be costly in terms of performance, see [[Mod optimization#The less function calls, the better|functions optimization]].

==For loops==
For loops are used to iterate over a sequence of values and perform operations on each value. For loops in Lua can be used to iterate over arrays, tables, and other sequences of values. For example:
{{CodeSnip
| lang = lua
| code =
-- repeat a number
for i = 1, 5 do
    print(i) -- Output: 1, 2, 3, 4, 5
end

-- repeat a number with a step
for i = 1, 10, 2 do
    print(i) -- Output: 1, 3, 5, 7, 9
end

-- repeat a number in reverse
for i = 5, 1, -1 do
    print(i) -- Output: 5, 4, 3, 2, 1
end
}}

For loops in Lua can be used to iterate over a range of values, with an optional step value. For loops can also be used to iterate over arrays, tables, and other sequences of values as seen in [[#Tables]]. For loops can be used to perform operations on each value in the sequence.

<code>break</code> can be used to exit a loop early, while <code>continue</code> can be emulated by using [[#Repeat until]] blocks.

==While loops==
While loops are used to repeat a block of code while a condition is true. While loops in Lua can be used to repeat a block of code until a condition is false. For example:
{{CodeSnip
| lang = lua
| code =
local i = 1
while i <= 5 do
    print(i) -- Output: 1, 2, 3, 4, 5
    i = i + 1
end
}}

While loops in Lua can be used to repeat a block of code until a condition is false. It is however '''not recommended''' to use while loops without properly knowing what you are doing as they can easily lead to infinite loops which will make the game stuck and crash.

==Repeat until==
Repeat until loops are used to repeat a block of code until a condition is true. Repeat until loops in Lua can be used to repeat a block of code until a condition is true. For example:
{{CodeSnip
| lang = lua
| code =
local i = 1
repeat
    print(i) -- Output: 1, 2, 3, 4, 5
    i = i + 1
until i > 5
}}

Repeat until loops in Lua can be used to repeat a block of code until a condition is true. It is recommended to use repeat until loops instead of while loops when you want to ensure that the block of code is executed at least once.

==Conditional statements (if)==
Conditional statements are used to execute different blocks of code based on the value of a condition. Conditional statements in Lua can be used to execute different blocks of code based on the value of a condition. For example:
{{CodeSnip
| lang = lua
| code =
local x = 10
if x > 5 then
    print("x is greater than 5") -- Output: x is greater than 5
elseif x < 5 then
    print("x is less than 5") -- Not reached
else
    print("x is equal to 5") -- Not reached
end
}}

Conditional statements in Lua can be used to execute different blocks of code based on the value of a condition. Conditional statements can be used to create branching logic in your code, allowing you to handle different cases and scenarios. But for this last case, you can utilize key-value tables to create a switch-case like structure.

==Switch-case using tables==
Lua does not have a built-in switch-case statement like some other languages, but you can achieve similar functionality using key-value tables. For example:
{{CodeSnip
| lang = lua
| code =
local actions = {
    greet = function()
        print("Hello!")
    end,
    farewell = function()
        print("Goodbye!")
    end,
    default = function()
        print("Unknown action")
    end
}

-- greet case
local action = "greet"
local func = actions[action] or actions.default
func() -- Output: Hello!

-- farewell case
action = "farewell"
func = actions[action] or actions.default
func() -- Output: Goodbye!

-- default use example
action = "unknown"
func = actions[action] or actions.default
func() -- Output: Unknown action
}}

In this example, the `actions` table contains functions for different actions. The `action` variable is used to look up the corresponding function in the `actions` table. If the action is not found, the `default` function is used. This allows you to create a switch-case like structure using tables.

==Modules==
Modules are used to organize and encapsulate code into reusable units. Modules in Lua can be used to organize and encapsulate code into reusable units. Modules can contain functions, variables, and other data that can be accessed and used by other parts of your code. For example:
{{CodeSnip
| lang = lua
| code =
--- mymodule.lua

-- module definition
local M = {}

-- module function
function M.add(a, b)
    return a + b
end

-- module variable
M.PI = 3.14159

return M
}}

Modules can be used to access code which was defined locally in another file. This is useful to separate your code into different files and keep your code organized and [[Mod optimization#Local, not global|eliminate the use of globals]]. Modules can be loaded using the <code>require</code> function, which will load and execute the module code. For example:
{{CodeSnip
| lang = lua
| code =
--- main.lua

-- load module
local mymodule = require("mymodule")

-- use module function
local result = mymodule.add(10, 20)
print(result) -- Output: 30

-- use module variable
print(mymodule.PI) -- Output: 3.14159
}}