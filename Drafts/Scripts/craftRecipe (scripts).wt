{{Header|Modding|Scripts}}
{{Page version|42.8.1}}
{{About|[[Build 42]] crafting recipes|crafting recipes for [[Build 41]]|Recipe (scripts)}}
Crafting recipes in [[Build 42]] were changed to use a different formatting and system than the one used in [[Build 41]] ([[Recipe (scripts)|Recipe]]).

{{Note|type=warn|Recipes might get changed during the unstable build, so it is important to verify the version of the information provided.}}

==craftingRecipe format==
To create a new crafting recipe, simply use the following entry in a script file:
{{CodeSnip
| lang = lua
| code =
module yourModule /* or Base */
{
    craftRecipe <RecipeID>
    {
        ...
    }
}
}}

The <code><RecipeID></code> is a unique identifier for the recipe, and '''should not have spaces in it'''. It is used to define the name of the recipe in the [[Translations|translation files]], in <code>Recipe_{language}</code>. For example, if the <code><RecipeID></code> is <code>MyRecipe</code>, the translation file for English needs to have:
{{CodeSnip
| lang = lua
| code =
RecipeEN = {
    Recipe_MyRecipe = "My Recipe Name"
}
}}

==craftRecipe parameters==
Different parameters can be used in the <code>craftRecipe</code> block to define the recipe. The following table lists the available parameters and the mandatory ones:
{| class="wikitable theme-blue"
|+ style="white-space:nowrap" | List of parameters for the <code>craftRecipe</code> block
! Parameter name !! Description
|-
| style="padding: 10px;text-align: center;"| [[time]]{{sup|mandatory|red}}
| style="padding: 5px; max-width: 500px;"| Time to craft the item.
|-
| style="padding: 10px;text-align: center;"| [[inputs]]{{sup|mandatory|red}}
| style="padding: 5px; max-width: 500px;"| The ingredients needed to crafting the item.
|-
| style="padding: 10px;text-align: center;"| [[outputs]]{{sup|mandatory|red}}
| style="padding: 5px; max-width: 500px;"| The item produced from the craft.
|-
| style="padding: 10px;text-align: center;"| [[Tags (craftRecipe)|Tags]]{{sup|mandatory|red}}
| style="padding: 5px; max-width: 500px;"| Specifies specific conditions which need to be respected to craft this item. At least one crafting bench tag is necessary for the craft to be recognized, such as {{Code|AnySurfaceCraft}}.
|-
| style="padding: 10px;text-align: center;"| [[timedAction (craftRecipe)|timedAction]]
| style="padding: 5px; max-width: 500px;"| Specifies an animation played during the crafting process as well as sounds and the calory burn and body heat generation rates.
|-
| style="padding: 10px;text-align: center;"| [[category]]
| style="padding: 5px; max-width: 500px;"| Specifies the category of the crafting recipe. This helps to organize and identify recipes in the crafting menu.
|-
| style="padding: 10px;text-align: center;"| [[ToolTip]]
| style="padding: 5px; max-width: 500px;"| Description of the crafting which is shown in the crafting menu.
|-
| style="padding: 10px;text-align: center;"| [[Icon (craftRecipe)|Icon]]
| style="padding: 5px; max-width: 500px;"| Specifies the icon associated with this crafting recipe.
|-
| style="padding: 10px;text-align: center;"| [[itemMapper]]
| style="padding: 5px; max-width: 500px;"| Allows to define an item mapping for input items to create a specific output item.
|-
| style="padding: 10px;text-align: center;"| [[OnCreate (craftRecipe)|OnCreate]]
| style="padding: 5px; max-width: 500px;"| Whenever the crafting recipe is finished, this Lua function will be called.
|-
| style="padding: 10px;text-align: center;"| [[OnTest]]
| style="padding: 5px; max-width: 500px;"| Used to verify if the recipe can be crafted.
|-
| style="padding: 10px;text-align: center;"| [[xpAward]]
| style="padding: 5px; max-width: 500px;"| Specifies the experience points awarded for crafting this item. 
|-
| style="padding: 10px;text-align: center;"| [[SkillRequired]]
| style="padding: 5px; max-width: 500px;"| Specifies the skill level required to perform this crafting action.
|-
| style="padding: 10px;text-align: center;"| [[needToBeLearn]]
| style="padding: 5px; max-width: 500px;"| Should the player learn the recipe before being able to craft it.
|-
| style="padding: 10px;text-align: center;"| [[AutoLearnAll]]
| style="padding: 5px; max-width: 500px;"| All the skills and their required level need to be reached to learn the recipe, not be be confused with AutoLearnAny.
|-
| style="padding: 10px;text-align: center;"| [[AutoLearnAny]]
| style="padding: 5px; max-width: 500px;"| Only one of the listed skills and their required level needs to be reached to learn the recipe, not be confused with AutoLearnAll.
|-
| style="padding: 10px;text-align: center;"| [[MetaRecipe]]
| style="padding: 5px; max-width: 500px;"| A meta recipe is used to link two recipes so that if the meta recipe is known then the main recipe is known.
|-
| style="padding: 10px;text-align: center;"| [[AllowBatchCraft]]
| style="padding: 5px; max-width: 500px;"| Allows the recipe to be crafted in batches.
|-
| style="padding: 10px;text-align: center;"| [[Fluids (craftRecipe)|Fluids]]
| style="padding: 5px; max-width: 500px;"| Recipes can use fluids.
|}

===Available skills===
You can define multiple skills and their respective experience points/levels by separating them with <code>;</code>. Below is how each parameters need to be formatted:
*[[xpAward]] format is <code>skill:experience</code>
*[[SkillRequired]] format is <code>skill:level</code>
*[[AutoLearnAll]] format is <code>skill:level</code>
*[[AutoLearnAny]] format is <code>skill:level</code>

You can find the available skills in the {{JavaObject|package=zombie/characters/skills|PerkFactory.Perks}} class. Alternatively, you can also use modded skills defined by your mod or other mods.

==Example==
Below are a few examples of vanilla crafting recipes you can do:

{{CodeSnip
| lang = lua
| line = true
| start = 4
| source = recipes_carpentry.txt
| path = ProjectZomboid\media\scripts\recipes
| retrieved = true
| version = 42.8.1
| code =
craftRecipe SawLogs
{
    timedAction = SawLogs,
    Time = 230,
    Tags = InHandCraft;CanBeDoneFromFloor,
    category = Carpentry,
    xpAward = Woodwork:5,
    inputs
    {
        item 1 [Base.Log] flags[Prop2],
        item 1 tags[Saw] mode:keep flags[MayDegradeLight;Prop1],
    }
    outputs
    {
        item 3 Base.Plank,
    }
}
}}

{{CodeSnip
| lang = lua
| line = true
| start = 139
| source = recipes_lightsources.txt
| path = ProjectZomboid\media\scripts\recipes
| retrieved = true
| version = 42.8.1
| code =
craftRecipe RefillHurricaneLantern
{
    timedAction = Making,
    Time = 50,
    OnCreate = Recipe.OnCreate.RefillHurricaneLantern,
    /* OnTest = Recipe.OnTest.RefillHurricaneLantern, */
    Tags = InHandCraft;CanBeDoneInDark,
    category = Miscellaneous, /*category = Survival,*/
    inputs
    {
        item 1 [Base.Lantern_Hurricane;Base.Lantern_Hurricane_Copper;Base.Lantern_Hurricane_Forged;Base.Lantern_Hurricane_Gold;Base.Lantern_Hurricane_Silver] mode:destroy flags[NotFull;AllowFavorite;InheritFavorite;ItemCount] mappers[LampMapper],
        item 1 [*],
        -fluid 1.0 [Petrol],
    }
    outputs
    {
        item 1 mapper:LampMapper,
    }
    itemMapper LampMapper
    {
        Base.Lantern_Hurricane = Base.Lantern_Hurricane,
        Base.Lantern_Hurricane_Copper = Base.Lantern_Hurricane_Copper,
        Base.Lantern_Hurricane_Forged = Base.Lantern_Hurricane_Forged,
        Base.Lantern_Hurricane_Gold = Base.Lantern_Hurricane_Gold,
        Base.Lantern_Hurricane_Silver = Base.Lantern_Hurricane_Silver,

        default = Base.Lantern_Hurricane,
    }
}
}}

{{CodeSnip
| lang = lua
| line = true
| start = 745
| source = recipes_bone.txt
| path = ProjectZomboid\media\scripts\recipes
| retrieved = true
| version = 42.8.1
| code =
craftRecipe CarveWhistle
{
    time = 200,
    tags = AnySurfaceCraft;Survivalist,
    category = Carving,
    xpAward = Carving:60,
    SkillRequired = Carving:6,
    needTobeLearn = true,
    AutoLearnAny = Carving:8,
    timedAction = SharpenStake,
    inputs
    {
        item 1 tags[DrillWood;DrillMetal;DrillWoodPoor] mode:keep flags[MayDegradeLight],
        item 1 tags[SharpKnife] mode:keep flags[MayDegradeLight],
        item 1 [Base.SmallAnimalBone] flags[Prop2;AllowDestroyedItem],
    }
    outputs
    {
        item 1 Base.Whistle_Bone,
    }
}
}}

{{Navbox modding}}
