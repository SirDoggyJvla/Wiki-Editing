{{Header|Modding}}
{{Page version|42.0.2}}
{{About|creating custom sandbox options|an explanation of sandbox options|Custom Sandbox}}
'''Sandbox options''' allow users to tweak how they want to experience the game which mods can also utilize. In comparison to [[Mod Options]], these settings apply to every players, but like them, you have access to different types of options.

==How to create a custom sandbox option==
Mods sandbox options are defined in a file named <code>sandbox-options.txt</code> with the following folder structure:
{{CodeSnip
| code =
media/
└── sandbox-options.txt
}}

<span style="font-size: 120%; font-weight: bold; color: green;">Note: </span> to get more informations on the modding folder structure and the media folder, see the [[Folders structure]] page.

The file starts with the line <code>VERSION = 1,</code> which is used by the game to recognize which method needs to be used to read the sandbox option file. It's used by developpers in case they change the way this file reads in future updates. Unless you know what you are doing, you shoulnd't change this value.

The rest of the file is a list of sandbox options, each defined by a block of lines resembling tables. Each blocks will follow the following structure:
{{CodeSnip
| code =
option ModName.OptionName
{
    type = <optionType>,
    ...
    page = <pageName>,
    translation = <ModName>_<OptionName>,
}
}}

You can chose any name for <code>ModName</code> and <code>OptionName</code> without spaces but it is usually your mod name and a logical option name for easier identification. Accessing the option value in Lua will be done with <code>SandboxVars.ModName.OptionName</code>.

==Option types==
The <code>type</code> parameter defines the type of the option which replaces <code><optionType></code> in the example code above. The following lists every types and their various parameters:
{| class="wikitable theme-red"
! Option type !! Description !! Parameters
|-
| style="padding: 10px;"| <big><code>boolean</code></big>
| style="padding: 5px;"| Booleans are used for options that can be either true or false.
| style="padding: 5px;"| 
{{CodeSnip
| code =
type = boolean,
default = <true/false>,
}}
|-
| style="padding: 10px;"| <big><code>integer</code></big>
| style="padding: 5px;" | Integers are used for options that can be any whole number.
| style="padding: 5px;"| 
{{CodeSnip
| code =
type = integer,
default = <number>,
min = <number>,
max = <number>,
}}
|-
| style="padding: 10px;"| <big><code>double</code></big>
| style="padding: 5px;" | Doubles are used for options that can be any float number.
| style="padding: 5px;"| 
{{CodeSnip
| code =
type = double,
default = <number>,
min = <number>,
max = <number>,
}}
|-
| style="padding: 10px;"| <big><code>string</code></big>
| style="padding: 5px;" | Strings are used for options that can be any text. For an empty string by default, use <code>default = ,</code>.
| style="padding: 5px;"| 
{{CodeSnip
| code =
type = string,
default = <text>,
}}
|-
| style="padding: 10px;"| <big><code>enum</code></big>
| style="padding: 5px;" | Enums are used for options that can be one of a list of predefined values.
| style="padding: 5px;"| 
{{CodeSnip
| code =
type = enum,
default = <value>,
numValues = <number>,
}}
|}

For example:
{{CodeSnip
| code =
option MyMod.MyOption
{
    type = boolean,
    default = true,
    page = MyPage,
    translation = MyMod_MyOption,
}
}}

==Translations==
You can also add [[Translations]] for your options in the translation folder. This is also needed if you want to give your option a proper name in the game.

Sandbox options are put in the following file:
{{CodeSnip
| code =
media/
└── lua/
    └── shared/
        └── Translate/
            └── <language code>/
                └── Sandbox_<language code>.txt
}}

The different sandbox options need extra parameters first:
{{CodeSnip
| code =
option ModName.OptionName
{
    type = <optionType>,
    ...
    page = <pageName>,
    translation = <ModName>_<OptionName>,
}
}}

Both <pageName> and <ModName>_<OptionName> are used with the translation system to give a proper name to the option in the game. The <pageName> is the name of the page where the option will be displayed in the game, while <ModName>_<OptionName> is the translation key for the option name.

The translations are defined in the translation file with the following structure:
{{CodeSnip
| code =
Sandbox_<language code> = {
    Sandbox_<pageName> = "The page name",
    
    Sandbox_<ModName>_<OptionName> = "The option name",
    Sandbox_<ModName>_<OptionName>_tooltip = "This is the tooltip of the option.",
}
}}

It's important to note that the tooltip translation is optional but it's recommended to add it for better understanding of the option. You can also use [[ISRichTextPanel]] tags in the tooltip, which means you can add images and colors in the sandbox options but also have custom text formating.

<span style="font-size: 120%; font-weight: bold; color: red;">Important ! </span> If you don't add the translation parameters they can't appear in-game but if the translation doesn't exist in the translation files, it will simply appear with the string in the translation parameters.

===Enumeration translation===
Enumeration options need to have their values translated in the translation file. The translation tag in the translation file for each values needs to be <code>Sandbox_<ModName>_<OptionName>_option<value> = "Enum name"</code>.

For example:
{{CodeSnip
| code =
Sandbox_<language code> = {
    Sandbox_<ModName>_<OptionName>_option1 = "First value",
    Sandbox_<ModName>_<OptionName>_option2 = "Second value",
}
}}

==External links==
*[https://github.com/demiurgeQuantified/PZModdingGuides/blob/main/guides/SandboxOptions.md Sandbox Options guide] by Albion

{{Navbox modding}}

{{ll|Category:Guides}}
